{"paragraphs":[{"text":"%md\n# IberIA - Construcción del conjunto de datos final","user":"jmarti32","dateUpdated":"2025-04-24T12:24:26+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>IberIA - Construcción del conjunto de datos final</h1>\n\n</div>"}]},"apps":[],"jobName":"paragraph_1745441247725_612188178","id":"20250414-122053_1259002683","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:24:26+0000","dateFinished":"2025-04-24T12:24:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:21716"},{"text":"%md\n## Pipeline\n\n#### 1. Decodificamos mensajes y convertimos en dataframe","user":"jmarti32","dateUpdated":"2025-04-24T12:24:27+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Pipeline</h2>\n<h4>1. Decodificamos mensajes y convertimos en dataframe</h4>\n\n</div>"}]},"apps":[],"jobName":"paragraph_1745441247727_1205393866","id":"20250414-122218_1904992776","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:24:27+0000","dateFinished":"2025-04-24T12:24:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21717"},{"text":"%livy3.pyspark\nspark.conf.set(\"spark.sql.legacy.timeParserPolicy\", \"LEGACY\")","user":"jmarti32","dateUpdated":"2025-04-24T12:24:27+0000","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1745441247727_-1975132871","id":"20250414-162000_1388059275","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:24:27+0000","dateFinished":"2025-04-24T12:24:52+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21718"},{"text":"%md\n#### 2. Separamos dataframes de posiciones, callsigns, velocidades y categorías de turbulencia. Decodificamos mensajes y convertimos en dataframe","user":"jmarti32","dateUpdated":"2025-04-24T12:24:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>2. Separamos dataframes de posiciones, callsigns, velocidades y categorías de turbulencia. Decodificamos mensajes y convertimos en dataframe</h4>\n\n</div>"}]},"apps":[],"jobName":"paragraph_1745441247728_1040103056","id":"20250414-122345_1064689098","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:24:53+0000","dateFinished":"2025-04-24T12:24:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21719"},{"text":"%livy3.pyspark\nfrom pyspark.sql import functions as F\n\ndef getPositions(df):\n        \"\"\"\n        Genera un DataFrame con los datos necesarios para visualizar las posiciones.\n        \n        Parámetros:\n            df: DataFrame de datos\n\n        Devuelve:\n            DataFrame con las siguientes columnas: \"Timestamp (date)\", \"ICAO\", \"Flight status\", \"lat\", \"lon\".\n        \"\"\"\n        df_pos = df.filter((F.col(\"Typecode\") >= 5) & (F.col(\"Typecode\") <= 22) & (F.col(\"Typecode\") != 19))\\\n               .select(\"Timestamp (date)\", \"ICAO\", \"Flight status\", \"lat\", \"lon\")\\\n               .distinct()\n        \n        return df_pos\n    \n\ndef getAirplaneCategories(df):\n    \"\"\"\n    Genera un DataFrame con la categoría de cada aeronave.\n    \n    Parámetros:\n        df: DataFrame de datos.\n\n    Devuelve:\n        DataFrame con las siguientes columnas: \"ICAO\", \"TurbulenceCategory\".\n    \"\"\"\n    # Seleccionamos mensajes ADS-B\n    df_filtered = df.filter(F.col(\"Downlink Format\").isin([17, 18]))\n\n    # Nos quedamos con los ICAOs y su tipo de avión\n    df_filtered = df_filtered.filter(F.col(\"TurbulenceCategory\").isNotNull() & (F.col(\"TurbulenceCategory\") != \"None\") & (~F.isnan(F.col(\"TurbulenceCategory\"))))\n\n    df_result = df_filtered.select(\"ICAO\", \"TurbulenceCategory\").dropDuplicates()\n\n    return df_result\n\n\ndef getFlights(df):\n    \"\"\"\n    Genera un DataFrame con los datos de vuelo.\n    \n    Parámetros:\n        df: DataFrame de datos.\n\n    Devuelve:\n        DataFrame con las siguientes columnas: \"Timestamp (date)\", \"ICAO\", \"Callsign\".\n    \"\"\"\n    NULL_CALLSIGN = \"########\"  # valor de nulo de la columna\n\n    # Seleccionamos las filas que contengan información relativa al identificador de vuelo\n    df_flights = df.filter((F.col(\"Callsign\").isNotNull()) & \n                           (F.col(\"Callsign\") != NULL_CALLSIGN) & \n                           (~F.isnan(F.col(\"Callsign\"))))\\\n               .select(\"Timestamp (date)\", \"ICAO\", \"Callsign\")\\\n               .distinct()  # Para evitar duplicados si es necesario\n\n\n    return df_flights\n    \ndef getAltitudes(df):\n        \"\"\"\n        Genera un Dataframe con los datos necesarios para visualizar las altitudes.\n        \n        Parámetros:\n            df: DataFrame de datos.\n\n        Devuelve:\n            DataFrame con las siguientes columnas: \"Timestamp (date)\", \"ICAO\", \"Callsign\", \"Flight status\", \"Altitude (ft)\", \"lat\", \"lon\".\n        \"\"\"\n        # DataFrame filtrando las filas que contienen una altitud no nula\n        df_alt = df.filter(F.col(\"Altitude (ft)\").isNotNull()  & (~F.isnan(F.col(\"Speed\"))))\\\n               .select(\"Timestamp (date)\", \"ICAO\", \"Callsign\", \"Flight status\", \"Altitude (ft)\", \"lat\", \"lon\")\n\n        return df_alt\n        \ndef getVelocities(df):\n    \"\"\"\n    Genera un dataframe con los mensajes relativos a la velocidad.\n\n    Parámetros:\n        df: DataFrame de datos.\n\n    Devuelve:\n        DataFrame con las siguientes columnas: \"Timestamp (date)\", \"ICAO\", \"Flight status\", \"Speed\", \"lat\", \"lon\".\n    \"\"\"\n    # Filtramos las filas donde la velocidad no es nula\n    df_vel = df.filter(F.col(\"Speed\").isNotNull() & (~F.isnan(F.col(\"Speed\"))))\\\n           .select(\"Timestamp (date)\", \"ICAO\", \"Flight status\", \"Speed\")\n    \n    return df_vel","user":"jmarti32","dateUpdated":"2025-04-24T12:24:53+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1745441247728_-480245350","id":"20250414-122529_959130399","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:24:53+0000","dateFinished":"2025-04-24T12:24:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21720"},{"text":"%md\n#### 3. Filtramos para posiciones cercanas al aeropuerto (radio de 5km)","user":"jmarti32","dateUpdated":"2025-04-24T12:24:54+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>3. Filtramos para posiciones cercanas al aeropuerto (radio de 5km)</h4>\n\n</div>"}]},"apps":[],"jobName":"paragraph_1745441247729_-1550366307","id":"20250414-123526_1879407803","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:24:54+0000","dateFinished":"2025-04-24T12:24:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21721"},{"text":"%livy3.pyspark\n\nfrom pyspark.sql.functions import lit, radians, sin, cos, acos, col\n\nAIRPORT_CENTER_LAT = 40.49291\nAIRPORT_CENTER_LON = -3.56974 \nRADIUS_AIRPORT = 5000\n\ndef filter_positions_within_radius(df, lat_col=\"lat\", lon_col=\"lon\", lat_ref= AIRPORT_CENTER_LAT, lon_ref=AIRPORT_CENTER_LON, radius_m=RADIUS_AIRPORT):\n    \"\"\"\n    Filtra un DataFrame de PySpark para conservar solo los registros que están dentro de un radio específico\n    desde un punto de referencia, usando la fórmula de Haversine.\n\n    :param df: DataFrame de entrada con columnas de latitud y longitud\n    :param lat_col: Nombre de la columna de latitud en el DataFrame\n    :param lon_col: Nombre de la columna de longitud en el DataFrame\n    :param lat_ref: Latitud del punto de referencia\n    :param lon_ref: Longitud del punto de referencia\n    :param radius_m: Radio en metros para el filtrado (por defecto 5000 m)\n    :return: DataFrame filtrado con una columna adicional 'distance_ref'\n    \"\"\"\n    R = 6371000  # Radio de la Tierra en metros\n\n    # Calcular distancia\n    distance_expr = R * acos(\n        sin(radians(lit(lat_ref))) * sin(radians(col(lat_col))) +\n        cos(radians(lit(lat_ref))) * cos(radians(col(lat_col))) *\n        cos(radians(lit(lon_ref)) - radians(col(lon_col)))\n    )\n\n    # Calculamos la distancia con respecto al punto de referencia\n    df_with_dist = df.withColumn(\"distance_ref\", distance_expr)\n\n    # Nos quedamos solo con las posiciones que no superan la distancia radius_m\n    filtered_df = df_with_dist.filter(col(\"distance_ref\") <= radius_m)\n\n    # Eliminamos la columna 'distance_ref'\n    return filtered_df.drop(\"distance_ref\")","user":"jmarti32","dateUpdated":"2025-04-24T12:24:54+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1745441247730_366469632","id":"20250414-123712_842877239","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:24:54+0000","dateFinished":"2025-04-24T12:24:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21722"},{"text":"%md\n#### 4. Combinar posiciones con callsigns","user":"jmarti32","dateUpdated":"2025-04-24T12:24:55+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>4. Combinar posiciones con callsigns</h4>\n\n</div>"}]},"apps":[],"jobName":"paragraph_1745441247731_2004722560","id":"20250414-124218_1688459150","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:24:55+0000","dateFinished":"2025-04-24T12:24:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21723"},{"text":"%livy3.pyspark\n# Merge de posiciones y estado de vuelo\ndef combinePsitionsFlights(df_pos_airport, df_flights):\n    \n    TOLERANCE_CALLSIGN_ASSIGNMENT = 600  # 10 minutos en segundos\n    \n    df_pos_airport = df_pos_airport.withColumn(\"Timestamp_sec\", F.unix_timestamp(\"Timestamp (date)\"))\n    df_flights = df_flights.withColumn(\"Timestamp_sec\", F.unix_timestamp(\"Timestamp (date)\"))\n    \n    df_pos_airport = df_pos_airport.withColumnRenamed(\"Timestamp_sec\", \"Timestamp_sec_pos\") \\\n                                   .withColumnRenamed(\"Timestamp (date)\", \"Timestamp\")\n    \n    df_flights = df_flights.withColumnRenamed(\"Timestamp_sec\", \"Timestamp_sec_flight\") \\\n                           .withColumnRenamed(\"Timestamp (date)\", \"Timestamp_flight\")\n    \n    df_pos_callsign = df_pos_airport.join(df_flights, on=\"ICAO\", how=\"inner\").filter(\n        F.abs(df_pos_airport[\"Timestamp_sec_pos\"] - df_flights[\"Timestamp_sec_flight\"]) <= TOLERANCE_CALLSIGN_ASSIGNMENT\n    )\n    \n    df_pos_callsign = df_pos_callsign.drop(\"Timestamp_sec_flight\", \"Timestamp_sec_pos\", \"Timestamp_flight\")\n    df_pos_callsign = df_pos_callsign.dropDuplicates([\"ICAO\", \"Timestamp\"])\n    \n    return df_pos_callsign","user":"jmarti32","dateUpdated":"2025-04-24T12:24:55+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1745441247731_40908156","id":"20250414-123356_1453165726","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:24:55+0000","dateFinished":"2025-04-24T12:24:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21724"},{"text":"%md\n#### 5. Detección de aeronaves situados en puntos de espera","user":"jmarti32","dateUpdated":"2025-04-24T12:24:56+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>5. Detección de aeronaves situados en puntos de espera</h4>\n\n</div>"}]},"apps":[],"jobName":"paragraph_1745441247732_432815418","id":"20250414-125713_2127398844","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:24:56+0000","dateFinished":"2025-04-24T12:24:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21725"},{"text":"%livy3.pyspark\nfrom pyspark.sql.functions import udf\nfrom pyspark.sql.types import StringType, StructType, StructField\nimport math\n\n# Función para calcular la distancia de Haversine\ndef haversine_distance(lat1, lon1, lat2, lon2):\n    R = 6371000  # Radio de la Tierra en metros\n    lat1_rad = math.radians(float(lat1))\n    lon1_rad = math.radians(float(lon1))\n    lat2_rad = math.radians(float(lat2))\n    lon2_rad = math.radians(float(lon2))\n    \n    return R * math.acos(\n        math.sin(lat1_rad) * math.sin(lat2_rad) +\n        math.cos(lat1_rad) * math.cos(lat2_rad) * math.cos(lon1_rad - lon2_rad)\n    )\n\n# UDF para asignar Designator y Runway basado en la distancia\ndef assign_designator_runway(lat, lon, holding_points):\n    # Inicializamos el valor de retorno como None\n    \n    DIST_THRESHOLD = 20\n    \n    closest_designator = None\n    closest_runway = None\n    min_distance = float(\"inf\")  # Inicializamos con un valor grande\n    \n    # Iteramos sobre los puntos de espera para encontrar el más cercano\n    for hold in holding_points:\n        designator, runway, lon_p, lat_p = hold\n        dist = haversine_distance(lat, lon, lat_p, lon_p)\n        \n        # Si la distancia es menor a 20 metros, devolvemos el primer punto\n        if dist < DIST_THRESHOLD:\n            closest_designator = designator\n            closest_runway = runway\n            break  # Detenemos la búsqueda una vez encontramos el primer punto cercano\n    \n    return (closest_designator, closest_runway)\n\n# Diccionario de puntos de espera\nholding_points = [\n    (\"Z1\", \"36L/18R\", -3.573093114831562, 40.490653160130186),\n    (\"KA6\", \"32R/14L\", -3.537524367869231, 40.472076292010001),\n    (\"KA8\", \"32R/14L\", -3.536653485337274, 40.466622566754253),\n    (\"K3\", \"32R/14L\", -3.558959606954449, 40.494122669084419),\n    (\"K2\", \"32R/14L\", -3.559326044131887, 40.4945961819448),\n    (\"K1\", \"32R/14L\", -3.560411408421098, 40.495554592925956),\n    (\"Y1\", \"36R/18L\", -3.560656492186808, 40.499431092287409),\n    (\"Y2\", \"36R/18L\", -3.560645785166937, 40.500298406173002),\n    (\"Y3\", \"36R/18L\", -3.560660061193443, 40.501183565039504),\n    (\"Y7\", \"36R/18L\", -3.560800449906033, 40.533391949745102),\n    (\"Z6\", \"36L/18R\", -3.576129307304151, 40.495184843931881),\n    (\"Z4\", \"36L/18R\", -3.576034129003182, 40.492555539298088),\n    (\"Z2\", \"36L/18R\", -3.575903257941006, 40.491865496230126),\n    (\"Z3\", \"36L/18R\", -3.57319305240692, 40.491819096186241),\n    (\"LF\", \"32L/14R\", -3.572566658955927, 40.479721203031424),\n    (\"L1\", \"32L/14R\", -3.57652786733783, 40.483565816902733),\n    (\"LA\", \"32L/14R\", -3.577181028787666, 40.484251101106899),\n    (\"LB\", \"32L/14R\", -3.577553413710587, 40.484873329796898),\n    (\"LC\", \"32L/14R\", -3.575750378154376, 40.486690643924192),\n    (\"LD\", \"32L/14R\", -3.575150753600524, 40.486522892072891),\n    (\"LE\", \"32L/14R\", -3.574915186586964, 40.485580625293494)\n]\n\n# Esquema para la UDF (dos campos de tipo String: Designator y Runway)\nschema = StructType([\n    StructField(\"Designator\", StringType(), True),\n    StructField(\"Runway\", StringType(), True)\n])\n\n# Registrar la UDF con el tipo de retorno correcto (STRUCT)\nassign_udf = udf(lambda lat, lon: assign_designator_runway(lat, lon, holding_points), schema)","user":"jmarti32","dateUpdated":"2025-04-24T12:24:57+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1745441247733_-1857973719","id":"20250414-125340_714598933","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:24:57+0000","dateFinished":"2025-04-24T12:24:57+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21726"},{"text":"%livy3.pyspark\n\ndef assignHoldingPoint(df_pos_callsign):\n\n    # Asignamos puntos de espera\n    df_with_hp = df_pos_callsign.withColumn(\n        \"Designator_Runway\", \n        assign_udf(\"lat\", \"lon\")\n    )\n    \n    # Separamos en dos columnas el resultado\n    df_with_hp = df_with_hp.withColumn(\n        \"Designator\", F.col(\"Designator_Runway.Designator\")\n    ).withColumn(\n        \"Runway\", F.col(\"Designator_Runway.Runway\")\n    )\n    df_with_hp = df_with_hp.drop(\"Designator_Runway\")\n    \n    return df_with_hp","user":"jmarti32","dateUpdated":"2025-04-24T12:24:57+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1745441247734_825566433","id":"20250414-135454_1876091336","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:24:57+0000","dateFinished":"2025-04-24T12:24:58+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21727"},{"text":"%md\n#### 6. Combinamos con las categorías de turbulencia\n\n\n","user":"jmarti32","dateUpdated":"2025-04-24T12:24:58+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>6. Combinamos con las categorías de turbulencia</h4>\n\n</div>"}]},"apps":[],"jobName":"paragraph_1745441247734_692557851","id":"20250414-140029_94085708","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:24:58+0000","dateFinished":"2025-04-24T12:24:58+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21728"},{"text":"%md\n#### 7. Eliminamos todos los vuelos que no se les ha detectado en un punto de espera","user":"jmarti32","dateUpdated":"2025-04-24T12:24:58+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>7. Eliminamos todos los vuelos que no se les ha detectado en un punto de espera</h4>\n\n</div>"}]},"apps":[],"jobName":"paragraph_1745441247735_-782667883","id":"20250414-144921_1899109159","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:24:58+0000","dateFinished":"2025-04-24T12:24:58+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21729"},{"text":"%livy3.pyspark\n\nfrom pyspark.sql.functions import col, count, when\n\ndef filterFlights(df_with_hp_tc):\n\n    # Filtramos solo los vuelos que alguna vez tuvieron un Designator no nulo\n    df_holding_count = df_with_hp_tc.groupBy(\"Callsign\").agg(\n        count(when(col(\"Designator\").isNotNull(), True)).alias(\"holding_count\")\n    ).filter(col(\"holding_count\") > 0)\n    \n    # Nos quedamos solo con los vuelos válidos (que pasaron por un holding point)\n    df_valid_callsigns = df_holding_count.select(\"Callsign\")\n    \n    # Unimos para mantener solo las filas de esos vuelos\n    df_valid_flights = df_with_hp_tc.join(df_valid_callsigns, on=\"Callsign\", how=\"inner\")\n    \n    return df_valid_flights","user":"jmarti32","dateUpdated":"2025-04-24T12:24:58+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1745441247736_-3322225","id":"20250414-145535_463208782","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:24:58+0000","dateFinished":"2025-04-24T12:24:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21730"},{"text":"%md\n#### 8. Nos quedamos con las posiciones desde que se le detecta en un punto de espera hasta la primera vez que se le detecta en el aire","user":"jmarti32","dateUpdated":"2025-04-24T12:24:59+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>8. Nos quedamos con las posiciones desde que se le detecta en un punto de espera hasta la primera vez que se le detecta en el aire</h4>\n\n</div>"}]},"apps":[],"jobName":"paragraph_1745441247736_-705633662","id":"20250414-172228_1410443714","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:24:59+0000","dateFinished":"2025-04-24T12:24:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21731"},{"text":"%livy3.pyspark\nfrom pyspark.sql.window import Window\nfrom pyspark.sql.functions import min\nfrom pyspark.sql.functions import when, col\n\ndef filterPositions(df_valid_flights):\n\n    # Ventana por Callsign\n    window_spec = Window.partitionBy(\"Callsign\")\n    \n    # Añadimos la primera vez que el vuelo fue detectado en tierra\n    df_with_first_on_ground = df_valid_flights.withColumn(\n        \"first_on_ground_time\",\n        min(when(col(\"Flight status\") == \"on-ground\", col(\"Timestamp\"))).over(window_spec)\n    )\n    \n    # Encontramos el primer timestamp en que el Designator no es nulo\n    df_with_first_holding = df_with_first_on_ground.withColumn(\n        \"first_holding_time\",\n        min(when(col(\"Designator\").isNotNull(), col(\"Timestamp\"))).over(window_spec)\n    )\n    \n    # Filtramos solo las filas en o después del primer punto de espera\n    df_from_hp = df_with_first_holding.filter(col(\"Timestamp\") >= col(\"first_holding_time\"))\n    \n    # Encontramos el primer timestamp en que FlightStatus es 'airborne'\n    df_with_first_airborne = df_from_hp.withColumn(\n        \"first_airborne_time\",\n        F.min(F.when(F.col(\"Flight status\") == \"airborne\", F.col(\"Timestamp\"))).over(window_spec)\n    )\n    \n    # Filtramos solo las filas en o después del primer estado airborne\n    df_takeoff_segment = df_with_first_airborne.filter(F.col(\"Timestamp\") <= F.col(\"first_airborne_time\"))\n    \n    return df_takeoff_segment\n","user":"jmarti32","dateUpdated":"2025-04-24T12:24:59+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1745441247737_1305347527","id":"20250414-150035_1607170937","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:24:59+0000","dateFinished":"2025-04-24T12:25:00+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21732"},{"text":"%md\n#### 9. Combinamos con los mensajes de velocidad","user":"jmarti32","dateUpdated":"2025-04-24T12:25:00+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>9. Combinamos con los mensajes de velocidad</h4>\n\n</div>"}]},"apps":[],"jobName":"paragraph_1745441247738_-620925971","id":"20250414-151250_2076060658","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:25:00+0000","dateFinished":"2025-04-24T12:25:00+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21733"},{"text":"%livy3.pyspark\n\n# Merge de posiciones y velocidades\ndef mergePositionsVelocities(df_takeoff_segment, df_speed):\n    TOLERANCE_VELOCITY_ASSIGNMENT = 1  # 1 segundo\n    \n    df_takeoff_segment = df_takeoff_segment.withColumn(\"Timestamp_sec\", F.unix_timestamp(\"Timestamp\"))\n    df_speed = df_speed.withColumn(\"Timestamp_sec\", F.unix_timestamp(\"Timestamp (date)\"))\n    \n    df_speed = df_speed.withColumnRenamed(\"Timestamp_sec\", \"Timestamp_sec_speed\") \\\n                           .withColumnRenamed(\"Timestamp (date)\", \"Timestamp_speed\") \\\n                           .withColumnRenamed(\"Flight status\", \"Flight status Speed\")\n    \n    df_with_velocities = df_takeoff_segment.join(df_speed, on=\"ICAO\", how=\"inner\").filter(\n        F.abs(df_takeoff_segment[\"Timestamp_sec\"] - df_speed[\"Timestamp_sec_speed\"]) <= TOLERANCE_VELOCITY_ASSIGNMENT\n    )\n    \n    df_with_velocities = df_with_velocities.drop(\"Timestamp_sec\", \"Timestamp_sec_speed\", \"Timestamp_speed\", \"Flight status Speed\")\n    df_with_velocities = df_with_velocities.dropDuplicates([\"ICAO\", \"Timestamp\"])\n    \n    return df_with_velocities","user":"jmarti32","dateUpdated":"2025-04-24T12:25:01+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1745441247738_-1692618949","id":"20250414-151243_284789266","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:25:01+0000","dateFinished":"2025-04-24T12:25:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21734"},{"text":"%md\n\n#### 10. Filtramos para quedarnos solo con las aeronaves que en algún momento se paran en un punto de espera y recalculamos primer timestamp\n","user":"jmarti32","dateUpdated":"2025-04-24T12:25:02+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>10. Filtramos para quedarnos solo con las aeronaves que en algún momento se paran en un punto de espera y recalculamos primer timestamp</h4>\n\n</div>"}]},"apps":[],"jobName":"paragraph_1745441247739_275013729","id":"20250414-165007_1912792647","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:25:02+0000","dateFinished":"2025-04-24T12:25:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21735"},{"text":"%livy3.pyspark\n\ndef importantTakeoffs(df_with_velocities):\n\n    # Filtrar los callsigns con velocidad 0 y punto de espera no nulo\n    df_callsigns_zero_speed = df_with_velocities.filter(\n        (col(\"Speed\") == 0) & \n        (col(\"Designator\").isNotNull())\n    ).select(\"ICAO\").distinct()\n    \n    # Nos quedamos solo con estos vuelos\n    df_important_takeoffs = df_with_velocities.join(\n        df_callsigns_zero_speed,\n        on=\"ICAO\",\n        how=\"inner\" \n    )\n    \n    # Ventana por Callsign\n    window_spec = Window.partitionBy(\"Callsign\")\n    \n    # Encontramos el primer timestamp en que el Designator no es nulo\n    df_important_takeoffs = df_important_takeoffs.withColumn(\n        \"first_holding_time\",\n        min(when(col(\"Designator\").isNotNull() & (F.col(\"Speed\") == 0), col(\"Timestamp\"))).over(window_spec)\n    )\n    \n    # Filtramos solo las filas en o después del primer punto de espera\n    df_important_takeoffs = df_important_takeoffs.filter(col(\"Timestamp\") >= col(\"first_holding_time\"))\n    \n    return df_important_takeoffs","user":"jmarti32","dateUpdated":"2025-04-24T12:25:02+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1745441247739_-1994572786","id":"20250414-155441_1006143277","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:25:02+0000","dateFinished":"2025-04-24T12:25:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21736"},{"text":"%md\n#### 11. Calculamos tiempos de espera","user":"jmarti32","dateUpdated":"2025-04-24T12:25:03+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>11. Calculamos tiempos de espera</h4>\n\n</div>"}]},"apps":[],"jobName":"paragraph_1745441247740_1938818137","id":"20250414-155848_1717078904","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:25:03+0000","dateFinished":"2025-04-24T12:25:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21737"},{"text":"%livy3.pyspark\n\n\"\"\"\n# Agrupar por identificador de vuelo\ndf_grouped = df_important_takeoffs.groupBy(\"Callsign\") \\\n                .agg(\n                    F.first(\"Designator\", ignorenulls=True).alias(\"Designator\"),\n                    F.first(\"Runway\", ignorenulls=True).alias(\"Runway\"),\n                    F.first(\"ICAO\", ignorenulls=True).alias(\"ICAO\"),\n                    F.first(\"lat\", ignorenulls=True).alias(\"lat\"),\n                    F.first(\"lon\", ignorenulls=True).alias(\"lon\"),\n                    F.first(\"TurbulenceCategory\", ignorenulls=True).alias(\"TurbulenceCategory\"),\n                    F.first(\"first_holding_time\").alias(\"first_holding_time\"),\n                    F.first(\"first_airborne_time\").alias(\"first_airborne_time\"),\n                    F.first(\"first_on_ground_time\").alias(\"first_on_ground_time\")\n                )\n\n\n# Calculamos los tiempos de espera\ndfB = df_grouped.withColumn(\"takeoff time\", \n                   (F.unix_timestamp(\"first_airborne_time\") - F.unix_timestamp(\"first_holding_time\"))\n                   .cast(\"double\"))\n                   \ndfB = dfB.withColumn(\"time_to_holding_point\", \n                   (F.unix_timestamp(\"first_holding_time\") - F.unix_timestamp(\"first_on_ground_time\"))\n                   .cast(\"double\"))\n\n\"\"\"\n","user":"jmarti32","dateUpdated":"2025-04-24T12:25:03+0000","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"'\\n# Agrupar por identificador de vuelo\\ndf_grouped = df_important_takeoffs.groupBy(\"Callsign\")                 .agg(\\n                    F.first(\"Designator\", ignorenulls=True).alias(\"Designator\"),\\n                    F.first(\"Runway\", ignorenulls=True).alias(\"Runway\"),\\n                    F.first(\"ICAO\", ignorenulls=True).alias(\"ICAO\"),\\n                    F.first(\"lat\", ignorenulls=True).alias(\"lat\"),\\n                    F.first(\"lon\", ignorenulls=True).alias(\"lon\"),\\n                    F.first(\"TurbulenceCategory\", ignorenulls=True).alias(\"TurbulenceCategory\"),\\n                    F.first(\"first_holding_time\").alias(\"first_holding_time\"),\\n                    F.first(\"first_airborne_time\").alias(\"first_airborne_time\"),\\n                    F.first(\"first_on_ground_time\").alias(\"first_on_ground_time\")\\n                )\\n\\n\\n# Calculamos los tiempos de espera\\ndfB = df_grouped.withColumn(\"takeoff time\", \\n                   (F.unix_timestamp(\"first_airborne_time\") - F.unix_timestamp(\"first_holding_time\"))\\n                   .cast(\"double\"))\\n                   \\ndfB = dfB.withColumn(\"time_to_holding_point\", \\n                   (F.unix_timestamp(\"first_holding_time\") - F.unix_timestamp(\"first_on_ground_time\"))\\n                   .cast(\"double\"))\\n\\n'"}]},"apps":[],"jobName":"paragraph_1745441247741_-1865574176","id":"20250414-172751_676450239","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:25:03+0000","dateFinished":"2025-04-24T12:25:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21738"},{"text":"%livy3.pyspark\n\ndef calculateHoldingTime(df_important_takeoffs):\n    df_holding = df_important_takeoffs.filter(\n        (col(\"Speed\") == 0) & \n        (col(\"Designator\").isNotNull())\n    )\n    \n    dfB = df_holding.withColumn(\"takeoff time\", \n                       (F.unix_timestamp(\"first_airborne_time\") - F.unix_timestamp(\"Timestamp\"))\n                       .cast(\"double\"))\n                       \n    dfB = dfB.withColumn(\"time_before_holding_point\", \n                       (F.unix_timestamp(\"first_holding_time\") - F.unix_timestamp(\"first_on_ground_time\"))\n                       .cast(\"double\"))\n                       \n    dfB = dfB.withColumn(\"time_at_holding_point\", \n                       (F.unix_timestamp(\"Timestamp\") - F.unix_timestamp(\"first_holding_time\"))\n                       .cast(\"double\"))\n    \n    return dfB","user":"jmarti32","dateUpdated":"2025-04-24T12:25:04+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1745441247741_-213161129","id":"20250415-120659_33109494","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:25:04+0000","dateFinished":"2025-04-24T12:25:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21739"},{"text":"\n%md\n#### 12. Con dataframe A, creamos otro dataframe que indique cada 10s qué pistas y puntos de espera están ocupados → dataframe C","user":"jmarti32","dateUpdated":"2025-04-24T12:25:05+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>12. Con dataframe A, creamos otro dataframe que indique cada 10s qué pistas y puntos de espera están ocupados → dataframe C</h4>\n\n</div>"}]},"apps":[],"jobName":"paragraph_1745441247742_-341766985","id":"20250414-172713_1509642100","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:25:05+0000","dateFinished":"2025-04-24T12:25:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21740"},{"text":"%livy3.pyspark\nimport pyspark.sql.functions as F\nfrom pyspark.sql.functions import udf\nfrom pyspark.sql.types import BooleanType, StringType\n\nRUNWAYS = [\n    { \"type\": \"Feature\", \"properties\": { \"Runway\": \"36R/18L\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ -3.560314698993372, 40.536214953564219 ], [ -3.560115619892884, 40.499859371026062 ], [ -3.558758924220036, 40.499866800139706 ], [ -3.558958003320524, 40.536222382677863 ], [ -3.560314698993372, 40.536214953564219 ] ] ] } },\n    { \"type\": \"Feature\", \"properties\": { \"Runway\": \"32R/14L\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ -3.560616443164626, 40.49648882920043 ], [ -3.530233771171787, 40.466560555412769 ], [ -3.529390530746063, 40.467416598679677 ], [ -3.559773202738903, 40.49734487246733 ], [ -3.560616443164626, 40.49648882920043 ] ] ] } },\n    { \"type\": \"Feature\", \"properties\": { \"Runway\": \"36L/18R\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ -3.575312220900675, 40.533035679421005 ], [ -3.575065318943644, 40.492052937902109 ], [ -3.574163865545885, 40.492058368739578 ], [ -3.574410767502916, 40.533041110258473 ], [ -3.575312220900675, 40.533035679421005 ] ] ] } },\n    { \"type\": \"Feature\", \"properties\": { \"Runway\": \"32L/14R\" }, \"geometry\": { \"type\": \"Polygon\", \"coordinates\": [ [ [ -3.545264836113798, 40.455701584425526 ], [ -3.576990231488946, 40.486626436878893 ], [ -3.577924321488386, 40.485668166355438 ], [ -3.546198926113238, 40.454743313902071 ], [ -3.545264836113798, 40.455701584425526 ] ] ] } }\n]\n\nRUNWAY_POLYGONS = {\n    r[\"properties\"][\"Runway\"]: r[\"geometry\"][\"coordinates\"][0]\n    for r in RUNWAYS\n}\n\nRUNWAY_NAMES = [\n    r[\"properties\"][\"Runway\"]\n    for r in RUNWAYS\n]\n\nHP_NAMES = [\n    hp[0]\n    for hp in holding_points\n]\n\ndef point_in_polygon(lat, lon, polygon):\n    \"\"\"\n    Algoritmo que calcula si un punto está dentro de un polígono.\n    \n    lat, lon: coordenadas del punto\n    polygon: lista de coordenadas [(lon1, lat1), (lon2, lat2), ...] del polígono (ojo al orden lon/lat)\n    \"\"\"\n    num = len(polygon)\n    j = num - 1\n    inside = False\n\n    for i in range(num):\n        xi, yi = polygon[i]\n        xj, yj = polygon[j]\n        if ((yi > lat) != (yj > lat)) and \\\n           (lon < (xj - xi) * (lat - yi) / (yj - yi + 1e-9) + xi):\n            inside = not inside\n        j = i\n\n    return inside\n    \n# Obtenemos las pistas ocupadas (geométricamente)\ndef get_runway_for_point(lat, lon):\n    for runway, polygon in RUNWAY_POLYGONS.items():\n        if point_in_polygon(lat, lon, polygon):\n            return runway\n    return None  # si no está en ninguna pista\n\nget_runway_udf = udf(lambda lat, lon: get_runway_for_point(lat, lon), StringType())\n\ndef occupaidEach10s(dfA):\n\n    # Redondear el timestamp a bloques de 10 segundos\n    # La columna time_10s va a contener timestamps redondeados a bloques de 10 segundos en formato UNIX\n    dfA = dfA.withColumn(\"time_10s\", (F.ceil(F.col(\"Timestamp\").cast(\"long\") / 10).cast(\"long\") * 10))\n    dfA = dfA.withColumn(\"time_10s\", F.from_unixtime(F.col(\"time_10s\")))\n    \n    # Obtenemos los puntos de espera ocupados en cada intervalo\n    # collect_set(): Agrupa todos los valores únicos de una columna (en este caso \"Designator\") dentro de cada grupo definido por un groupBy() o window y devuelve una lista sin duplicados\n    dfA_holding_points = dfA.groupBy(\"time_10s\")\\\n        .agg(F.collect_set(\"Designator\").alias(\"occupied_holding_points\"))\n    \n    dfA = dfA.withColumn(\"RunwayFromPosition\", get_runway_udf(\"lat\", \"lon\"))\n\n    # Pistas ocupadas por cada intervalo\n    dfA_runways = dfA.groupBy(\"time_10s\")\\\n        .agg(F.collect_set(\"RunwayFromPosition\").alias(\"occupied_runways\"))\n    \n    status_by_interval = dfA_holding_points.join(dfA_runways, on=\"time_10s\")\n    \n    # Generamos las columnas booleanas para puntos de espera\n    for hp in HP_NAMES:\n        status_by_interval = status_by_interval.withColumn(f\"{hp}\", F.array_contains(F.col(\"occupied_holding_points\"), hp))\n        \n    # Y para las pistas\n    for rw in RUNWAY_NAMES:\n        safe_rw = rw.replace(\"/\", \"_\")  # Evita caracteres problemáticos en nombres de columna\n        status_by_interval = status_by_interval.withColumn(f\"{safe_rw}\", F.array_contains(F.col(\"occupied_runways\"), rw))\n    \n    status_by_interval_final = status_by_interval.drop(\"occupied_holding_points\", \"occupied_runways\")\n\n    return status_by_interval_final, dfA","user":"jmarti32","dateUpdated":"2025-04-24T12:25:05+0000","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1745441247743_-1845929678","id":"20250414-180345_154875765","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:25:06+0000","dateFinished":"2025-04-24T12:25:07+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21741"},{"text":"%md\n#### 13. Con dataframe A, creamos otro dataframe que indique todos los despegues / aterrizajes por pista, debe incluir el timestamp y la categoría de turbulencia del avión","user":"jmarti32","dateUpdated":"2025-04-24T12:25:07+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>13. Con dataframe A, creamos otro dataframe que indique todos los despegues / aterrizajes por pista, debe incluir el timestamp y la categoría de turbulencia del avión</h4>\n\n</div>"}]},"apps":[],"jobName":"paragraph_1745441247743_1423708021","id":"20250414-162814_886900227","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:25:07+0000","dateFinished":"2025-04-24T12:25:07+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21742"},{"text":"%livy3.pyspark\n\nfrom pyspark.sql.window import Window\nfrom pyspark.sql import functions as F\n\ndef eventsByRunway(dfA):\n    \n    window_spec = Window.partitionBy(\"ICAO\").orderBy(\"Timestamp\")\n    \n    dfA = dfA.withColumn(\"Runway\", F.coalesce(\"Runway\", \"RunwayFromPosition\"))\n    dfA = dfA.withColumn(\"prev_status\", F.lag(\"Flight status\").over(window_spec))\n    \n    dfD = dfA.filter(\n        ((F.col(\"Flight status\") == \"airborne\") & (F.col(\"prev_status\") == \"on-ground\")) |\n        ((F.col(\"Flight status\") == \"on-ground\") & (F.col(\"prev_status\") == \"airborne\"))\n    ).withColumn(\n        \"Event\",\n        F.when(F.col(\"Flight status\") == \"airborne\", F.lit(\"takeoff\"))\n         .when(F.col(\"Flight status\") == \"on-ground\", F.lit(\"landing\"))\n    )\n    \n    \n    dfD = dfD.select(\"Runway\", \"Timestamp\", \"TurbulenceCategory\", \"Event\")\n    \n    dfD = dfD.filter(F.col(\"Runway\").isNotNull())\n    \n    return dfD","user":"jmarti32","dateUpdated":"2025-04-24T12:25:07+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1745441247744_-11422151","id":"20250414-162807_1213175665","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:25:07+0000","dateFinished":"2025-04-24T12:25:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21743"},{"text":"%md\n#### 14. Agrupamos D por minuto para conseguir tasa de despegues y de aterrizajes por minuto","user":"jmarti32","dateUpdated":"2025-04-24T12:25:08+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>14. Agrupamos D por minuto para conseguir tasa de despegues y de aterrizajes por minuto</h4>\n\n</div>"}]},"apps":[],"jobName":"paragraph_1745441247745_922395514","id":"20250414-163502_299231904","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:25:08+0000","dateFinished":"2025-04-24T12:25:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21744"},{"text":"%livy3.pyspark\n\nfrom pyspark.sql.functions import count, when\n\ndef eventsMinuteRate(dfD):\n\n    dfE = dfD.withColumn(\n        \"Minute\", \n        F.from_unixtime(\n            F.ceil(F.unix_timestamp(F.col(\"Timestamp\")) / 60) * 60\n        ).cast(\"timestamp\")\n    ) \\\n    .groupBy(\"Minute\") \\\n    .agg(\n        count(when(F.col(\"Event\") == \"takeoff\", True)).alias(\"last min takeoffs\"),\n        count(when(F.col(\"Event\") == \"landing\", True)).alias(\"last min landings\")\n    )\n    \n    return dfE","user":"jmarti32","dateUpdated":"2025-04-24T12:25:08+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1745441247745_593776149","id":"20250414-163455_241479774","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:25:08+0000","dateFinished":"2025-04-24T12:25:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21745"},{"text":"%md\n#### 15. Combinamos B con C, D y E","user":"jmarti32","dateUpdated":"2025-04-24T12:25:09+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>15. Combinamos B con C, D y E</h4>\n\n</div>"}]},"apps":[],"jobName":"paragraph_1745441247746_2118954648","id":"20250414-184547_653222813","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:25:09+0000","dateFinished":"2025-04-24T12:25:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21746"},{"text":"%livy3.pyspark\nfrom pyspark import StorageLevel\n\nfrom pyspark.sql.functions import col, unix_timestamp, from_unixtime, round\nfrom pyspark.sql.functions import date_trunc\nfrom pyspark.sql.window import Window\nfrom pyspark.sql.functions import col, last\nfrom pyspark.sql.functions import row_number\n\ndef combineBCDE(dfB, dfC, dfD, dfE):\n\n    # Redondeamos a múltiplos de 10 segundos\n    dfB = dfB.withColumn(\n        \"time_10s\",\n        from_unixtime((unix_timestamp(\"Timestamp\") / 10).cast(\"long\") * 10)\n    )\n    \n    # Paso 2: Join con dfC\n    dfF = dfB.join(dfC, on=\"time_10s\", how=\"inner\")\n    \n    # Paso 1: Redondear a minuto\n    dfF = dfF.withColumn(\n        \"Minute\",\n        date_trunc(\"minute\", col(\"Timestamp\"))\n    )\n    \n    # Paso 2: Join con dfE\n    dfF = dfF.join(dfE, on=\"Minute\", how=\"inner\")\n    \n    # Paso 1: Creamos la window\n    w = Window.partitionBy(\"Runway\").orderBy(\"Timestamp\").rangeBetween(Window.unboundedPreceding, Window.currentRow)\n    \n    # Paso 2: Renombramos Timestamp para evitar conflictos en el join\n    dfD = dfD.withColumnRenamed(\"Timestamp\", \"event_timestamp\")\n    dfD = dfD.withColumnRenamed(\"TurbulenceCategory\", \"last_event_turb_cat\")\n    dfD = dfD.withColumnRenamed(\"Event\", \"last_event\")\n    \n    # Paso 3: Join de los dataframes en base a Runway y evento previo en el tiempo\n    df_combined = dfF.join(dfD, on=\"Runway\", how=\"left\") \\\n        .filter(col(\"event_timestamp\") < col(\"Timestamp\"))\n    \n    # Paso 4: Usamos Window para quedarnos con la fila más reciente antes de `first_holding_time`\n    w2 = Window.partitionBy(\"Callsign\", \"Timestamp\", \"Runway\").orderBy(col(\"event_timestamp\").desc())\n    \n    df_final = df_combined.withColumn(\"rank\", row_number().over(w2)) \\\n        .filter(col(\"rank\") == 1) \\\n        .drop(\"rank\")\n    \n    df_final = df_final.withColumn(\n        \"time_since_last_event_seconds\",\n        unix_timestamp(\"Timestamp\") - unix_timestamp(\"event_timestamp\")\n    )\n    \n    return df_final","user":"jmarti32","dateUpdated":"2025-04-24T12:25:09+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1745441247747_-278812659","id":"20250414-185620_1015873358","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:25:09+0000","dateFinished":"2025-04-24T12:25:10+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21747"},{"text":"%md\n#### 16. Extraemos la hora, día de la semana y si es festivo o no","user":"jmarti32","dateUpdated":"2025-04-24T12:25:10+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>16. Extraemos la hora, día de la semana y si es festivo o no</h4>\n\n</div>"}]},"apps":[],"jobName":"paragraph_1745441247747_89076488","id":"20250414-205517_1234165797","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:25:10+0000","dateFinished":"2025-04-24T12:25:10+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21748"},{"text":"%livy3.pyspark\n# hora, dia de la semana y si es festivo o no\n\nfrom pyspark.sql.functions import udf\nfrom pyspark.sql.types import BooleanType\n\nimport json\nfrom pyspark.sql.functions import to_date, hour, date_format, udf\nfrom pyspark.sql.types import BooleanType\n\n# Lista en json de festivos en España y en la Comunidad de Madrid extraída en local (no está instalada la librería 'holidays' en Zepelin)\nholiday_list_json = [\n  {\n    \"date\": \"2024-01-01\",\n    \"name\": \"A\\u00f1o Nuevo\"\n  },\n  {\n    \"date\": \"2024-01-06\",\n    \"name\": \"Epifan\\u00eda del Se\\u00f1or\"\n  },\n  {\n    \"date\": \"2024-03-29\",\n    \"name\": \"Viernes Santo\"\n  },\n  {\n    \"date\": \"2024-05-01\",\n    \"name\": \"Fiesta del Trabajo\"\n  },\n  {\n    \"date\": \"2024-08-15\",\n    \"name\": \"Asunci\\u00f3n de la Virgen\"\n  },\n  {\n    \"date\": \"2024-10-12\",\n    \"name\": \"Fiesta Nacional de Espa\\u00f1a\"\n  },\n  {\n    \"date\": \"2024-11-01\",\n    \"name\": \"Todos los Santos\"\n  },\n  {\n    \"date\": \"2024-12-06\",\n    \"name\": \"D\\u00eda de la Constituci\\u00f3n Espa\\u00f1ola\"\n  },\n  {\n    \"date\": \"2024-12-25\",\n    \"name\": \"Natividad del Se\\u00f1or\"\n  },\n  {\n    \"date\": \"2024-03-28\",\n    \"name\": \"Jueves Santo\"\n  },\n  {\n    \"date\": \"2024-05-02\",\n    \"name\": \"Fiesta de la Comunidad de Madrid\"\n  },\n  {\n    \"date\": \"2024-07-25\",\n    \"name\": \"Santiago Ap\\u00f3stol\"\n  },\n  {\n    \"date\": \"2025-01-01\",\n    \"name\": \"A\\u00f1o Nuevo\"\n  },\n  {\n    \"date\": \"2025-01-06\",\n    \"name\": \"Epifan\\u00eda del Se\\u00f1or\"\n  },\n  {\n    \"date\": \"2025-04-18\",\n    \"name\": \"Viernes Santo\"\n  },\n  {\n    \"date\": \"2025-05-01\",\n    \"name\": \"Fiesta del Trabajo\"\n  },\n  {\n    \"date\": \"2025-08-15\",\n    \"name\": \"Asunci\\u00f3n de la Virgen\"\n  },\n  {\n    \"date\": \"2025-11-01\",\n    \"name\": \"Todos los Santos\"\n  },\n  {\n    \"date\": \"2025-12-06\",\n    \"name\": \"D\\u00eda de la Constituci\\u00f3n Espa\\u00f1ola\"\n  },\n  {\n    \"date\": \"2025-12-08\",\n    \"name\": \"Inmaculada Concepci\\u00f3n\"\n  },\n  {\n    \"date\": \"2025-12-25\",\n    \"name\": \"Natividad del Se\\u00f1or\"\n  },\n  {\n    \"date\": \"2025-04-17\",\n    \"name\": \"Jueves Santo\"\n  },\n  {\n    \"date\": \"2025-05-02\",\n    \"name\": \"Fiesta de la Comunidad de Madrid\"\n  },\n  {\n    \"date\": \"2025-07-25\",\n    \"name\": \"Santiago Ap\\u00f3stol\"\n  }\n]\n\n# Crear conjunto de fechas festivas (como strings \"yyyy-MM-dd\")\nholiday_dates = set(item[\"date\"] for item in holiday_list_json)\n\n# UDF para marcar si una fecha es festiva\nis_holiday_udf = udf(lambda d: d.strftime(\"%Y-%m-%d\") in holiday_dates, BooleanType())\n\ndef dateColumns(df_final):\n\n    # Añadir columnas a dfE\n    df_final = df_final.withColumn(\"Hour\", hour(\"Minute\")) \\\n             .withColumn(\"Weekday\", date_format(\"Minute\", \"E\")) \\\n             .withColumn(\"Date\", to_date(\"Minute\")) \\\n             .withColumn(\"IsHoliday\", is_holiday_udf(\"Date\")) \\\n             .drop(\"Date\")\n             \n    return df_final","user":"jmarti32","dateUpdated":"2025-04-24T12:25:11+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1745441247748_-1146281896","id":"20250414-221224_384390008","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:25:11+0000","dateFinished":"2025-04-24T12:25:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21749"},{"text":"%md\n#### 17. Extraemos la aerolínea","user":"jmarti32","dateUpdated":"2025-04-24T12:25:12+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>17. Extraemos la aerolínea</h4>\n\n</div>"}]},"apps":[],"jobName":"paragraph_1745441247749_-948624874","id":"20250414-230218_1655465274","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:25:12+0000","dateFinished":"2025-04-24T12:25:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21750"},{"text":"%livy3.pyspark\nfrom pyspark.sql.functions import substring","user":"jmarti32","dateUpdated":"2025-04-24T12:25:12+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1745441247750_-508068201","id":"20250414-230156_1689013942","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:25:12+0000","dateFinished":"2025-04-24T12:25:13+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21751"},{"text":"%md\n#### 18. Renombramos y reordenamos columnas","user":"jmarti32","dateUpdated":"2025-04-24T12:25:13+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>18. Renombramos y reordenamos columnas</h4>\n\n</div>"}]},"apps":[],"jobName":"paragraph_1745441247750_2101255007","id":"20250414-235755_1614154460","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:25:13+0000","dateFinished":"2025-04-24T12:25:13+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21752"},{"text":"%livy3.pyspark\nfrom pyspark.sql import functions as F\n\ndef cleanColumns(df_final):\n\n    # Suponiendo que df es tu DataFrame original\n    df_final_clean = df_final.select(\n        F.col('takeoff time').alias('takeoff_time'),\n        F.col('Timestamp').alias('timestamp'),\n        F.col('ICAO').alias('icao'),\n        F.col('Callsign').alias('callsign'),\n        F.col('Designator').alias('holding_point'),\n        F.col('Runway').alias('runway'),\n        F.col('operator'),\n        F.col('TurbulenceCategory').alias('turbulence_category'),\n        F.col('lat'),\n        F.col('lon'),\n        F.col('last min takeoffs').alias('last_min_takeoffs'),\n        F.col('last_event'),\n        F.col('last min landings').alias('last_min_landings'),\n        F.col('last_event_turb_cat').alias('last_event_turb_cat'),\n        F.col('time_since_last_event_seconds'),\n        F.col('time_before_holding_point'),\n        F.col('time_at_holding_point'),\n        F.col('Hour').alias('hour'),\n        F.col('Weekday').alias('weekday'),\n        F.col('IsHoliday').alias('is_holiday'),\n        F.col('event_timestamp'),\n        F.col('first_holding_time'),\n        F.col('first_airborne_time'),\n        F.col('first_on_ground_time'),\n        'Z1', 'KA6', 'KA8', 'K3', 'K2', 'K1', 'Y1', 'Y2', 'Y3', 'Y7', 'Z6', 'Z4', 'Z2', \n        'Z3', 'LF', 'L1', 'LA', 'LB', 'LC', 'LD', 'LE', '36R_18L', '32R_14L', '36L_18R', '32L_14R'\n        \n    )\n    \n    return df_final_clean\n","user":"jmarti32","dateUpdated":"2025-04-24T12:25:13+0000","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1745441247751_-1637727574","id":"20250414-235814_1558872810","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-24T12:25:13+0000","dateFinished":"2025-04-24T12:25:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21753"},{"text":"%livy3.pyspark\nimport os\n\n# Definir las rutas de los archivos de entrada y salida\ninput_path = \"/data/proyecto2/outputs/iberIA/decoded\"\noutput_path = \"/data/proyecto2/outputs/iberIA/processed\"\n\n# --- PROCESAR TODOS LOS QUE ESTAN EN LA CARPETA DECODED ---\n\"\"\"\n# Obtener el sistema de archivos\nfs = spark.sparkContext._jvm.org.apache.hadoop.fs.FileSystem.get(spark._jsc.hadoopConfiguration())\n\n# Listar los archivos en el directorio especificado\nfiles = fs.listStatus(spark._jvm.org.apache.hadoop.fs.Path(input_path))\n\n# Extraer solo los nombres de archivo\nfile_names = [file.getPath().getName() for file in files]\nfile_names\n\"\"\"\n\n# --- PROCESAR UNA LISTA DE NOMBRES DE FICHEROS ---\nfile_names = [\n    \"dia_28_01_2025.parquet\",\n    \"dia_29_01_2025.parquet\",\n    \"dia_30_01_2025.parquet\",\n    \"dia_31_01_2025.parquet\",\n]\n\n\n\n# Bucle para procesar cada archivo\nfor file in file_names:\n    # Extraer la parte de la fecha del nombre del archivo\n    date_str = file.replace(\"dia_\", \"\").replace(\".parquet\", \"\")\n    day, month, year = date_str.split(\"_\")\n    output_file = f\"{year}_{month}_{day}\"\n    \n    # Definir la ruta del archivo de salida\n    output_file_path = os.path.join(output_path, output_file)\n\n    # 1. Leemos el archivo parquet\n    df_raw = spark.read.parquet(os.path.join(input_path, file))\n\n    # 2.\n    # posiciones\n    df_pos = getPositions(df_raw)\n    \n    # vuelos\n    df_flights = getFlights(df_raw)\n    \n    # categorías de turbulencia\n    df_types = getAirplaneCategories(df_raw)\n    \n    # velocidades\n    df_speed = getVelocities(df_raw)\n    \n    # altitudes\n    df_alt = getAltitudes(df_raw)\n    \n    # 3.\n    df_pos_airport = filter_positions_within_radius(df_pos)\n    \n    # 4.\n    df_pos_callsign = combinePsitionsFlights(df_pos_airport, df_flights)\n    \n    # 5.\n    df_with_hp = assignHoldingPoint(df_pos_callsign)\n    \n    # 6.\n    df_with_hp_tc = df_with_hp.join(df_types, on=\"ICAO\", how=\"inner\")\n    dfA = df_with_hp_tc\n    \n    # 7.\n    df_valid_flights = filterFlights(df_with_hp_tc)\n    \n    # 8.\n    df_takeoff_segment = filterPositions(df_valid_flights)\n    \n    # 9.\n    df_with_velocities = mergePositionsVelocities(df_takeoff_segment, df_speed)\n    \n    # 10. \n    df_important_takeoffs = importantTakeoffs(df_with_velocities)\n    \n    # 11.\n    dfB = calculateHoldingTime(df_important_takeoffs)\n    \n    # 12.\n    status_by_interval_final, dfA = occupaidEach10s(dfA)\n    dfC = status_by_interval_final\n    \n    # 13.\n    dfD = eventsByRunway(dfA)\n    \n    # 14.\n    dfE = eventsMinuteRate(dfD)\n    \n    # 15.\n    dfA.persist(StorageLevel.MEMORY_AND_DISK)\n    dfB.persist(StorageLevel.MEMORY_AND_DISK)\n    dfC.persist(StorageLevel.MEMORY_AND_DISK)\n    dfD.persist(StorageLevel.MEMORY_AND_DISK)\n    dfE.persist(StorageLevel.MEMORY_AND_DISK)\n    df_final = combineBCDE(dfB, dfC, dfD, dfE)\n    \n    # 16.\n    df_final = dateColumns(df_final)\n    \n    # 17.\n    df_final = df_final.withColumn(\"operator\", substring(\"Callsign\", 1, 3))\n    \n    # 18.\n    df_final_clean = cleanColumns(df_final)\n    \n    # Guardamos el archivo procesado en el directorio de salida\n    df_final_clean.persist(StorageLevel.MEMORY_AND_DISK)\n    df_final_clean.show()\n    df_final_clean.coalesce(1).write.parquet(output_file_path)\n\n    print(f\"Archivo procesado: {file} -> {output_file}\")\n    \n    # Liberamos memoria\n    dfA.unpersist()\n    dfB.unpersist()\n    dfC.unpersist()\n    dfD.unpersist()\n    dfE.unpersist()\n    df_final_clean.unpersist()\n","user":"jmarti32","dateUpdated":"2025-04-25T08:46:34+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"DataFrame[ICAO: string, Timestamp: timestamp, Flight status: string, lat: float, lon: float, Callsign: string, Designator: string, Runway: string, TurbulenceCategory: string, time_10s: string, RunwayFromPosition: string]\nDataFrame[ICAO: string, Callsign: string, Timestamp: timestamp, Flight status: string, lat: float, lon: float, Designator: string, Runway: string, TurbulenceCategory: string, first_on_ground_time: timestamp, first_holding_time: timestamp, first_airborne_time: timestamp, Speed: float, takeoff time: double, time_before_holding_point: double, time_at_holding_point: double]\nDataFrame[time_10s: string, Z1: boolean, KA6: boolean, KA8: boolean, K3: boolean, K2: boolean, K1: boolean, Y1: boolean, Y2: boolean, Y3: boolean, Y7: boolean, Z6: boolean, Z4: boolean, Z2: boolean, Z3: boolean, LF: boolean, L1: boolean, LA: boolean, LB: boolean, LC: boolean, LD: boolean, LE: boolean, 36R_18L: boolean, 32R_14L: boolean, 36L_18R: boolean, 32L_14R: boolean]\nDataFrame[Runway: string, Timestamp: timestamp, TurbulenceCategory: string, Event: string]\nDataFrame[Minute: timestamp, last min takeoffs: bigint, last min landings: bigint]\nDataFrame[takeoff_time: double, timestamp: timestamp, icao: string, callsign: string, holding_point: string, runway: string, operator: string, turbulence_category: string, lat: float, lon: float, last_min_takeoffs: bigint, last_event: string, last_min_landings: bigint, last_event_turb_cat: string, time_since_last_event_seconds: bigint, time_before_holding_point: double, time_at_holding_point: double, hour: int, weekday: string, is_holiday: boolean, event_timestamp: timestamp, first_holding_time: timestamp, first_airborne_time: timestamp, first_on_ground_time: timestamp, Z1: boolean, KA6: boolean, KA8: boolean, K3: boolean, K2: boolean, K1: boolean, Y1: boolean, Y2: boolean, Y3: boolean, Y7: boolean, Z6: boolean, Z4: boolean, Z2: boolean, Z3: boolean, LF: boolean, L1: boolean, LA: boolean, LB: boolean, LC: boolean, LD: boolean, LE: boolean, 36R_18L: boolean, 32R_14L: boolean, 36L_18R: boolean, 32L_14R: boolean]\nn|takeoff_time|           timestamp|  icao|callsign|holding_point| runway|operator| turbulence_category|     lat|     lon|last_min_takeoffs|last_event|last_min_landings| last_event_turb_cat|time_since_last_event_seconds|time_before_holding_point|time_at_holding_point|hour|weekday|is_holiday|     event_timestamp|  first_holding_time| first_airborne_time|first_on_ground_time|   Z1|  KA6|  KA8|   K3|   K2|   K1|  Y1|   Y2|   Y3|   Y7|   Z6|   Z4|   Z2|   Z3|   LF|   L1|   LA|   LB|   LC|   LD|   LE|36R_18L|32R_14L|36L_18R|32L_14R|\n+------------+--------------------+------+--------+-------------+-------+--------+--------------------+--------+--------+-----------------+----------+-----------------+--------------------+-----------------------------+-------------------------+---------------------+----+-------+----------+--------------------+--------------------+--------------------+--------------------+-----+-----+-----+-----+-----+-----+----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-------+-------+-------+-------+\n|       126.0|2025-01-28 15:27:...|344195|ANE1053_|           Y1|36R/18L|     ANE|Medium 1 (between...|40.49944|-3.56065|                1|   takeoff|                0|Medium 2 (between...|                           24|                    954.0|                  0.0|  15|    Tue|     false|2025-01-28 15:27:...|2025-01-28 15:27:...|2025-01-28 15:29:...|2025-01-28 15:11:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       126.0|2025-01-28 15:27:...|344195|ANE1053_|           Y1|36R/18L|     ANE|Medium 1 (between...|40.49943|-3.56066|                1|   takeoff|                0|Medium 2 (between...|                           24|                    954.0|                  0.0|  15|    Tue|     false|2025-01-28 15:27:...|2025-01-28 15:27:...|2025-01-28 15:29:...|2025-01-28 15:11:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       125.0|2025-01-28 15:27:...|344195|ANE1053_|           Y1|36R/18L|     ANE|Medium 1 (between...|40.49944|-3.56065|                1|   takeoff|                0|Medium 2 (between...|                           25|                    954.0|                  1.0|  15|    Tue|     false|2025-01-28 15:27:...|2025-01-28 15:27:...|2025-01-28 15:29:...|2025-01-28 15:11:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       124.0|2025-01-28 15:27:...|344195|ANE1053_|           Y1|36R/18L|     ANE|Medium 1 (between...|40.49944|-3.56065|                1|   takeoff|                0|Medium 2 (between...|                           26|                    954.0|                  2.0|  15|    Tue|     false|2025-01-28 15:27:...|2025-01-28 15:27:...|2025-01-28 15:29:...|2025-01-28 15:11:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       123.0|2025-01-28 15:27:...|344195|ANE1053_|           Y1|36R/18L|     ANE|Medium 1 (between...|40.49944|-3.56065|                1|   takeoff|                0|Medium 2 (between...|                           27|                    954.0|                  3.0|  15|    Tue|     false|2025-01-28 15:27:...|2025-01-28 15:27:...|2025-01-28 15:29:...|2025-01-28 15:11:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       123.0|2025-01-28 15:27:...|344195|ANE1053_|           Y1|36R/18L|     ANE|Medium 1 (between...|40.49944|-3.56065|                1|   takeoff|                0|Medium 2 (between...|                           27|                    954.0|                  3.0|  15|    Tue|     false|2025-01-28 15:27:...|2025-01-28 15:27:...|2025-01-28 15:29:...|2025-01-28 15:11:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       122.0|2025-01-28 15:27:...|344195|ANE1053_|           Y1|36R/18L|     ANE|Medium 1 (between...|40.49944|-3.56065|                1|   takeoff|                0|Medium 2 (between...|                           28|                    954.0|                  4.0|  15|    Tue|     false|2025-01-28 15:27:...|2025-01-28 15:27:...|2025-01-28 15:29:...|2025-01-28 15:11:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       122.0|2025-01-28 15:27:...|344195|ANE1053_|           Y1|36R/18L|     ANE|Medium 1 (between...|40.49944|-3.56065|                1|   takeoff|                0|Medium 2 (between...|                           28|                    954.0|                  4.0|  15|    Tue|     false|2025-01-28 15:27:...|2025-01-28 15:27:...|2025-01-28 15:29:...|2025-01-28 15:11:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       121.0|2025-01-28 15:27:...|344195|ANE1053_|           Y1|36R/18L|     ANE|Medium 1 (between...|40.49944|-3.56065|                1|   takeoff|                0|Medium 2 (between...|                           29|                    954.0|                  5.0|  15|    Tue|     false|2025-01-28 15:27:...|2025-01-28 15:27:...|2025-01-28 15:29:...|2025-01-28 15:11:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       121.0|2025-01-28 15:27:...|344195|ANE1053_|           Y1|36R/18L|     ANE|Medium 1 (between...|40.49944|-3.56065|                1|   takeoff|                0|Medium 2 (between...|                           29|                    954.0|                  5.0|  15|    Tue|     false|2025-01-28 15:27:...|2025-01-28 15:27:...|2025-01-28 15:29:...|2025-01-28 15:11:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       121.0|2025-01-28 15:27:...|344195|ANE1053_|           Y1|36R/18L|     ANE|Medium 1 (between...|40.49943|-3.56066|                1|   takeoff|                0|Medium 2 (between...|                           29|                    954.0|                  5.0|  15|    Tue|     false|2025-01-28 15:27:...|2025-01-28 15:27:...|2025-01-28 15:29:...|2025-01-28 15:11:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       120.0|2025-01-28 15:27:...|344195|ANE1053_|           Y1|36R/18L|     ANE|Medium 1 (between...|40.49943|-3.56066|                1|   takeoff|                0|Medium 2 (between...|                           30|                    954.0|                  6.0|  15|    Tue|     false|2025-01-28 15:27:...|2025-01-28 15:27:...|2025-01-28 15:29:...|2025-01-28 15:11:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       120.0|2025-01-28 15:27:...|344195|ANE1053_|           Y1|36R/18L|     ANE|Medium 1 (between...|40.49943|-3.56066|                1|   takeoff|                0|Medium 2 (between...|                           30|                    954.0|                  6.0|  15|    Tue|     false|2025-01-28 15:27:...|2025-01-28 15:27:...|2025-01-28 15:29:...|2025-01-28 15:11:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       118.0|2025-01-28 15:27:...|344195|ANE1053_|           Y1|36R/18L|     ANE|Medium 1 (between...|40.49943|-3.56066|                1|   takeoff|                0|Medium 2 (between...|                           32|                    954.0|                  8.0|  15|    Tue|     false|2025-01-28 15:27:...|2025-01-28 15:27:...|2025-01-28 15:29:...|2025-01-28 15:11:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       118.0|2025-01-28 15:27:...|344195|ANE1053_|           Y1|36R/18L|     ANE|Medium 1 (between...|40.49943|-3.56066|                1|   takeoff|                0|Medium 2 (between...|                           32|                    954.0|                  8.0|  15|    Tue|     false|2025-01-28 15:27:...|2025-01-28 15:27:...|2025-01-28 15:29:...|2025-01-28 15:11:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       117.0|2025-01-28 15:27:...|344195|ANE1053_|           Y1|36R/18L|     ANE|Medium 1 (between...|40.49943|-3.56066|                1|   takeoff|                0|Medium 2 (between...|                           33|                    954.0|                  9.0|  15|    Tue|     false|2025-01-28 15:27:...|2025-01-28 15:27:...|2025-01-28 15:29:...|2025-01-28 15:11:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       117.0|2025-01-28 15:27:...|344195|ANE1053_|           Y1|36R/18L|     ANE|Medium 1 (between...|40.49944|-3.56065|                1|   takeoff|                0|Medium 2 (between...|                           33|                    954.0|                  9.0|  15|    Tue|     false|2025-01-28 15:27:...|2025-01-28 15:27:...|2025-01-28 15:29:...|2025-01-28 15:11:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       116.0|2025-01-28 15:27:...|344195|ANE1053_|           Y1|36R/18L|     ANE|Medium 1 (between...|40.49943|-3.56066|                1|   takeoff|                0|Medium 2 (between...|                           34|                    954.0|                 10.0|  15|    Tue|     false|2025-01-28 15:27:...|2025-01-28 15:27:...|2025-01-28 15:29:...|2025-01-28 15:11:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       115.0|2025-01-28 15:27:...|344195|ANE1053_|           Y1|36R/18L|     ANE|Medium 1 (between...|40.49943|-3.56066|                1|   takeoff|                0|Medium 2 (between...|                           35|                    954.0|                 11.0|  15|    Tue|     false|2025-01-28 15:27:...|2025-01-28 15:27:...|2025-01-28 15:29:...|2025-01-28 15:11:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       115.0|2025-01-28 15:27:...|344195|ANE1053_|           Y1|36R/18L|     ANE|Medium 1 (between...|40.49944|-3.56065|                1|   takeoff|                0|Medium 2 (between...|                           35|                    954.0|                 11.0|  15|    Tue|     false|2025-01-28 15:27:...|2025-01-28 15:27:...|2025-01-28 15:29:...|2025-01-28 15:11:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\nnonly showing top 20 rows\n\nArchivo procesado: dia_28_01_2025.parquet -> 2025_01_28\nDataFrame[ICAO: string, Timestamp: timestamp, Flight status: string, lat: float, lon: float, Callsign: string, Designator: string, Runway: string, TurbulenceCategory: string, time_10s: string, RunwayFromPosition: string]\nDataFrame[ICAO: string, Callsign: string, Timestamp: timestamp, Flight status: string, lat: float, lon: float, Designator: string, Runway: string, TurbulenceCategory: string, first_on_ground_time: timestamp, first_holding_time: timestamp, first_airborne_time: timestamp, Speed: float, takeoff time: double, time_before_holding_point: double, time_at_holding_point: double]\nDataFrame[time_10s: string, Z1: boolean, KA6: boolean, KA8: boolean, K3: boolean, K2: boolean, K1: boolean, Y1: boolean, Y2: boolean, Y3: boolean, Y7: boolean, Z6: boolean, Z4: boolean, Z2: boolean, Z3: boolean, LF: boolean, L1: boolean, LA: boolean, LB: boolean, LC: boolean, LD: boolean, LE: boolean, 36R_18L: boolean, 32R_14L: boolean, 36L_18R: boolean, 32L_14R: boolean]\nDataFrame[Runway: string, Timestamp: timestamp, TurbulenceCategory: string, Event: string]\nDataFrame[Minute: timestamp, last min takeoffs: bigint, last min landings: bigint]\nDataFrame[takeoff_time: double, timestamp: timestamp, icao: string, callsign: string, holding_point: string, runway: string, operator: string, turbulence_category: string, lat: float, lon: float, last_min_takeoffs: bigint, last_event: string, last_min_landings: bigint, last_event_turb_cat: string, time_since_last_event_seconds: bigint, time_before_holding_point: double, time_at_holding_point: double, hour: int, weekday: string, is_holiday: boolean, event_timestamp: timestamp, first_holding_time: timestamp, first_airborne_time: timestamp, first_on_ground_time: timestamp, Z1: boolean, KA6: boolean, KA8: boolean, K3: boolean, K2: boolean, K1: boolean, Y1: boolean, Y2: boolean, Y3: boolean, Y7: boolean, Z6: boolean, Z4: boolean, Z2: boolean, Z3: boolean, LF: boolean, L1: boolean, LA: boolean, LB: boolean, LC: boolean, LD: boolean, LE: boolean, 36R_18L: boolean, 32R_14L: boolean, 36L_18R: boolean, 32L_14R: boolean]\nDataFrame[ICAO: string, Timestamp: timestamp, Flight status: string, lat: float, lon: float, Callsign: string, Designator: string, Runway: string, TurbulenceCategory: string, time_10s: string, RunwayFromPosition: string]\nDataFrame[ICAO: string, Callsign: string, Timestamp: timestamp, Flight status: string, lat: float, lon: float, Designator: string, Runway: string, TurbulenceCategory: string, first_on_ground_time: timestamp, first_holding_time: timestamp, first_airborne_time: timestamp, Speed: float, takeoff time: double, time_before_holding_point: double, time_at_holding_point: double]\nDataFrame[time_10s: string, Z1: boolean, KA6: boolean, KA8: boolean, K3: boolean, K2: boolean, K1: boolean, Y1: boolean, Y2: boolean, Y3: boolean, Y7: boolean, Z6: boolean, Z4: boolean, Z2: boolean, Z3: boolean, LF: boolean, L1: boolean, LA: boolean, LB: boolean, LC: boolean, LD: boolean, LE: boolean, 36R_18L: boolean, 32R_14L: boolean, 36L_18R: boolean, 32L_14R: boolean]\nDataFrame[Runway: string, Timestamp: timestamp, TurbulenceCategory: string, Event: string]\nDataFrame[Minute: timestamp, last min takeoffs: bigint, last min landings: bigint]\nDataFrame[takeoff_time: double, timestamp: timestamp, icao: string, callsign: string, holding_point: string, runway: string, operator: string, turbulence_category: string, lat: float, lon: float, last_min_takeoffs: bigint, last_event: string, last_min_landings: bigint, last_event_turb_cat: string, time_since_last_event_seconds: bigint, time_before_holding_point: double, time_at_holding_point: double, hour: int, weekday: string, is_holiday: boolean, event_timestamp: timestamp, first_holding_time: timestamp, first_airborne_time: timestamp, first_on_ground_time: timestamp, Z1: boolean, KA6: boolean, KA8: boolean, K3: boolean, K2: boolean, K1: boolean, Y1: boolean, Y2: boolean, Y3: boolean, Y7: boolean, Z6: boolean, Z4: boolean, Z2: boolean, Z3: boolean, LF: boolean, L1: boolean, LA: boolean, LB: boolean, LC: boolean, LD: boolean, LE: boolean, 36R_18L: boolean, 32R_14L: boolean, 36L_18R: boolean, 32L_14R: boolean]\nn|takeoff_time|           timestamp|  icao|callsign|holding_point| runway|operator| turbulence_category|     lat|     lon|last_min_takeoffs|last_event|last_min_landings| last_event_turb_cat|time_since_last_event_seconds|time_before_holding_point|time_at_holding_point|hour|weekday|is_holiday|     event_timestamp|  first_holding_time| first_airborne_time|first_on_ground_time|   Z1|  KA6|  KA8|   K3|   K2|   K1|   Y1|   Y2|   Y3|   Y7|   Z6|   Z4|   Z2|   Z3|   LF|   L1|   LA|   LB|   LC|   LD|   LE|36R_18L|32R_14L|36L_18R|32L_14R|\nn|       119.0|2025-01-29 15:43:...|344217|AEA28FN_|           K2|32R/14L|     AEA|Medium 2 (between...|40.49451|-3.55946|                2|   takeoff|                0|Heavy (larger tha...|                           51|                    752.0|                 43.0|  15|    Wed|     false|2025-01-29 15:42:...|2025-01-29 15:42:...|2025-01-29 15:45:...|2025-01-29 15:29:...|false|false|false|false|false|false|false|false|false|false|false|false| true|false|false|false|false|false|false|false|false|  false|   true|  false|   true|\n|       109.0|2025-01-29 15:43:...|344217|AEA28FN_|           K2|32R/14L|     AEA|Medium 2 (between...|40.49451|-3.55946|                2|   takeoff|                0|Heavy (larger tha...|                           61|                    752.0|                 53.0|  15|    Wed|     false|2025-01-29 15:42:...|2025-01-29 15:42:...|2025-01-29 15:45:...|2025-01-29 15:29:...|false|false|false|false| true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|  false|   true|  false|  false|\n|       104.0|2025-01-29 15:43:...|344217|AEA28FN_|           K2|32R/14L|     AEA|Medium 2 (between...|40.49453|-3.55942|                2|   takeoff|                0|Heavy (larger tha...|                           66|                    752.0|                 58.0|  15|    Wed|     false|2025-01-29 15:42:...|2025-01-29 15:42:...|2025-01-29 15:45:...|2025-01-29 15:29:...|false|false|false|false| true|false|false|false|false|false|false|false| true|false|false|false|false|false|false|false|false|  false|   true|  false|  false|\n|       217.0|2025-01-29 14:39:...|34750A|AEA4065_|           K2|32R/14L|     AEA|High vortex aircraft| 40.4947|-3.55916|                1|   takeoff|                0|Medium 1 (between...|                           21|                   1032.0|                  0.0|  14|    Wed|     false|2025-01-29 14:38:...|2025-01-29 14:39:...|2025-01-29 14:42:...|2025-01-29 14:22:...|false|false|false|false| true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|  false|   true|  false|  false|\n|       216.0|2025-01-29 14:39:...|34750A|AEA4065_|           K2|32R/14L|     AEA|High vortex aircraft| 40.4947|-3.55916|                1|   takeoff|                0|Medium 1 (between...|                           22|                   1032.0|                  1.0|  14|    Wed|     false|2025-01-29 14:38:...|2025-01-29 14:39:...|2025-01-29 14:42:...|2025-01-29 14:22:...|false|false|false|false| true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|  false|   true|  false|  false|\n|       216.0|2025-01-29 14:39:...|34750A|AEA4065_|           K2|32R/14L|     AEA|High vortex aircraft|40.49471|-3.55915|                1|   takeoff|                0|Medium 1 (between...|                           22|                   1032.0|                  1.0|  14|    Wed|     false|2025-01-29 14:38:...|2025-01-29 14:39:...|2025-01-29 14:42:...|2025-01-29 14:22:...|false|false|false|false| true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|  false|   true|  false|  false|\n|       215.0|2025-01-29 14:39:...|34750A|AEA4065_|           K2|32R/14L|     AEA|High vortex aircraft|40.49471|-3.55915|                1|   takeoff|                0|Medium 1 (between...|                           23|                   1032.0|                  2.0|  14|    Wed|     false|2025-01-29 14:38:...|2025-01-29 14:39:...|2025-01-29 14:42:...|2025-01-29 14:22:...|false|false|false|false| true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|  false|   true|  false|  false|\n|       215.0|2025-01-29 14:39:...|34750A|AEA4065_|           K2|32R/14L|     AEA|High vortex aircraft|40.49471|-3.55915|                1|   takeoff|                0|Medium 1 (between...|                           23|                   1032.0|                  2.0|  14|    Wed|     false|2025-01-29 14:38:...|2025-01-29 14:39:...|2025-01-29 14:42:...|2025-01-29 14:22:...|false|false|false|false| true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|  false|   true|  false|  false|\n|       209.0|2025-01-29 14:39:...|34750A|AEA4065_|           K2|32R/14L|     AEA|High vortex aircraft|40.49471|-3.55915|                1|   takeoff|                0|Medium 1 (between...|                           29|                   1032.0|                  8.0|  14|    Wed|     false|2025-01-29 14:38:...|2025-01-29 14:39:...|2025-01-29 14:42:...|2025-01-29 14:22:...|false|false|false|false| true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|  false|   true|  false|  false|\n|       208.0|2025-01-29 14:39:...|34750A|AEA4065_|           K2|32R/14L|     AEA|High vortex aircraft|40.49471|-3.55915|                1|   takeoff|                0|Medium 1 (between...|                           30|                   1032.0|                  9.0|  14|    Wed|     false|2025-01-29 14:38:...|2025-01-29 14:39:...|2025-01-29 14:42:...|2025-01-29 14:22:...|false|false|false|false| true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|  false|   true|  false|  false|\n|       208.0|2025-01-29 14:39:...|34750A|AEA4065_|           K2|32R/14L|     AEA|High vortex aircraft|40.49471|-3.55915|                1|   takeoff|                0|Medium 1 (between...|                           30|                   1032.0|                  9.0|  14|    Wed|     false|2025-01-29 14:38:...|2025-01-29 14:39:...|2025-01-29 14:42:...|2025-01-29 14:22:...|false|false|false|false| true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|  false|   true|  false|  false|\n|       207.0|2025-01-29 14:39:...|34750A|AEA4065_|           K2|32R/14L|     AEA|High vortex aircraft| 40.4947|-3.55916|                1|   takeoff|                0|Medium 1 (between...|                           31|                   1032.0|                 10.0|  14|    Wed|     false|2025-01-29 14:38:...|2025-01-29 14:39:...|2025-01-29 14:42:...|2025-01-29 14:22:...|false|false|false|false| true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|  false|   true|  false|  false|\n|       206.0|2025-01-29 14:39:...|34750A|AEA4065_|           K2|32R/14L|     AEA|High vortex aircraft| 40.4947|-3.55916|                1|   takeoff|                0|Medium 1 (between...|                           32|                   1032.0|                 11.0|  14|    Wed|     false|2025-01-29 14:38:...|2025-01-29 14:39:...|2025-01-29 14:42:...|2025-01-29 14:22:...|false|false|false|false| true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|  false|   true|  false|  false|\n|       206.0|2025-01-29 14:39:...|34750A|AEA4065_|           K2|32R/14L|     AEA|High vortex aircraft| 40.4947|-3.55916|                1|   takeoff|                0|Medium 1 (between...|                           32|                   1032.0|                 11.0|  14|    Wed|     false|2025-01-29 14:38:...|2025-01-29 14:39:...|2025-01-29 14:42:...|2025-01-29 14:22:...|false|false|false|false| true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|  false|   true|  false|  false|\n|       205.0|2025-01-29 14:39:...|34750A|AEA4065_|           K2|32R/14L|     AEA|High vortex aircraft| 40.4947|-3.55916|                1|   takeoff|                0|Medium 1 (between...|                           33|                   1032.0|                 12.0|  14|    Wed|     false|2025-01-29 14:38:...|2025-01-29 14:39:...|2025-01-29 14:42:...|2025-01-29 14:22:...|false|false|false|false| true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|  false|   true|  false|  false|\n|       205.0|2025-01-29 14:39:...|34750A|AEA4065_|           K2|32R/14L|     AEA|High vortex aircraft|40.49471|-3.55915|                1|   takeoff|                0|Medium 1 (between...|                           33|                   1032.0|                 12.0|  14|    Wed|     false|2025-01-29 14:38:...|2025-01-29 14:39:...|2025-01-29 14:42:...|2025-01-29 14:22:...|false|false|false|false| true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|  false|   true|  false|  false|\n|       204.0|2025-01-29 14:39:...|34750A|AEA4065_|           K2|32R/14L|     AEA|High vortex aircraft| 40.4947|-3.55916|                1|   takeoff|                0|Medium 1 (between...|                           34|                   1032.0|                 13.0|  14|    Wed|     false|2025-01-29 14:38:...|2025-01-29 14:39:...|2025-01-29 14:42:...|2025-01-29 14:22:...|false|false|false|false| true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|  false|   true|  false|  false|\n|       204.0|2025-01-29 14:39:...|34750A|AEA4065_|           K2|32R/14L|     AEA|High vortex aircraft| 40.4947|-3.55916|                1|   takeoff|                0|Medium 1 (between...|                           34|                   1032.0|                 13.0|  14|    Wed|     false|2025-01-29 14:38:...|2025-01-29 14:39:...|2025-01-29 14:42:...|2025-01-29 14:22:...|false|false|false|false| true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|  false|   true|  false|  false|\n|       203.0|2025-01-29 14:39:...|34750A|AEA4065_|           K2|32R/14L|     AEA|High vortex aircraft| 40.4947|-3.55916|                1|   takeoff|                0|Medium 1 (between...|                           35|                   1032.0|                 14.0|  14|    Wed|     false|2025-01-29 14:38:...|2025-01-29 14:39:...|2025-01-29 14:42:...|2025-01-29 14:22:...|false|false|false|false| true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|  false|   true|  false|  false|\n|       202.0|2025-01-29 14:39:...|34750A|AEA4065_|           K2|32R/14L|     AEA|High vortex aircraft|40.49471|-3.55915|                1|   takeoff|                0|Medium 1 (between...|                           36|                   1032.0|                 15.0|  14|    Wed|     false|2025-01-29 14:38:...|2025-01-29 14:39:...|2025-01-29 14:42:...|2025-01-29 14:22:...|false|false|false|false| true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|false|  false|  false|  false|  false|\nnonly showing top 20 rows\n\nArchivo procesado: dia_29_01_2025.parquet -> 2025_01_29\nDataFrame[ICAO: string, Timestamp: timestamp, Flight status: string, lat: float, lon: float, Callsign: string, Designator: string, Runway: string, TurbulenceCategory: string, time_10s: string, RunwayFromPosition: string]\nDataFrame[ICAO: string, Callsign: string, Timestamp: timestamp, Flight status: string, lat: float, lon: float, Designator: string, Runway: string, TurbulenceCategory: string, first_on_ground_time: timestamp, first_holding_time: timestamp, first_airborne_time: timestamp, Speed: float, takeoff time: double, time_before_holding_point: double, time_at_holding_point: double]\nDataFrame[time_10s: string, Z1: boolean, KA6: boolean, KA8: boolean, K3: boolean, K2: boolean, K1: boolean, Y1: boolean, Y2: boolean, Y3: boolean, Y7: boolean, Z6: boolean, Z4: boolean, Z2: boolean, Z3: boolean, LF: boolean, L1: boolean, LA: boolean, LB: boolean, LC: boolean, LD: boolean, LE: boolean, 36R_18L: boolean, 32R_14L: boolean, 36L_18R: boolean, 32L_14R: boolean]\nDataFrame[Runway: string, Timestamp: timestamp, TurbulenceCategory: string, Event: string]\nDataFrame[Minute: timestamp, last min takeoffs: bigint, last min landings: bigint]\nDataFrame[takeoff_time: double, timestamp: timestamp, icao: string, callsign: string, holding_point: string, runway: string, operator: string, turbulence_category: string, lat: float, lon: float, last_min_takeoffs: bigint, last_event: string, last_min_landings: bigint, last_event_turb_cat: string, time_since_last_event_seconds: bigint, time_before_holding_point: double, time_at_holding_point: double, hour: int, weekday: string, is_holiday: boolean, event_timestamp: timestamp, first_holding_time: timestamp, first_airborne_time: timestamp, first_on_ground_time: timestamp, Z1: boolean, KA6: boolean, KA8: boolean, K3: boolean, K2: boolean, K1: boolean, Y1: boolean, Y2: boolean, Y3: boolean, Y7: boolean, Z6: boolean, Z4: boolean, Z2: boolean, Z3: boolean, LF: boolean, L1: boolean, LA: boolean, LB: boolean, LC: boolean, LD: boolean, LE: boolean, 36R_18L: boolean, 32R_14L: boolean, 36L_18R: boolean, 32L_14R: boolean]\nDataFrame[ICAO: string, Timestamp: timestamp, Flight status: string, lat: float, lon: float, Callsign: string, Designator: string, Runway: string, TurbulenceCategory: string, time_10s: string, RunwayFromPosition: string]\nDataFrame[ICAO: string, Callsign: string, Timestamp: timestamp, Flight status: string, lat: float, lon: float, Designator: string, Runway: string, TurbulenceCategory: string, first_on_ground_time: timestamp, first_holding_time: timestamp, first_airborne_time: timestamp, Speed: float, takeoff time: double, time_before_holding_point: double, time_at_holding_point: double]\nDataFrame[time_10s: string, Z1: boolean, KA6: boolean, KA8: boolean, K3: boolean, K2: boolean, K1: boolean, Y1: boolean, Y2: boolean, Y3: boolean, Y7: boolean, Z6: boolean, Z4: boolean, Z2: boolean, Z3: boolean, LF: boolean, L1: boolean, LA: boolean, LB: boolean, LC: boolean, LD: boolean, LE: boolean, 36R_18L: boolean, 32R_14L: boolean, 36L_18R: boolean, 32L_14R: boolean]\nDataFrame[Runway: string, Timestamp: timestamp, TurbulenceCategory: string, Event: string]\nDataFrame[Minute: timestamp, last min takeoffs: bigint, last min landings: bigint]\nDataFrame[takeoff_time: double, timestamp: timestamp, icao: string, callsign: string, holding_point: string, runway: string, operator: string, turbulence_category: string, lat: float, lon: float, last_min_takeoffs: bigint, last_event: string, last_min_landings: bigint, last_event_turb_cat: string, time_since_last_event_seconds: bigint, time_before_holding_point: double, time_at_holding_point: double, hour: int, weekday: string, is_holiday: boolean, event_timestamp: timestamp, first_holding_time: timestamp, first_airborne_time: timestamp, first_on_ground_time: timestamp, Z1: boolean, KA6: boolean, KA8: boolean, K3: boolean, K2: boolean, K1: boolean, Y1: boolean, Y2: boolean, Y3: boolean, Y7: boolean, Z6: boolean, Z4: boolean, Z2: boolean, Z3: boolean, LF: boolean, L1: boolean, LA: boolean, LB: boolean, LC: boolean, LD: boolean, LE: boolean, 36R_18L: boolean, 32R_14L: boolean, 36L_18R: boolean, 32L_14R: boolean]\nn|takeoff_time|           timestamp|  icao|callsign|holding_point| runway|operator| turbulence_category|     lat|     lon|last_min_takeoffs|last_event|last_min_landings| last_event_turb_cat|time_since_last_event_seconds|time_before_holding_point|time_at_holding_point|hour|weekday|is_holiday|     event_timestamp|  first_holding_time| first_airborne_time|first_on_ground_time|   Z1|  KA6|  KA8|   K3|   K2|   K1|  Y1|   Y2|   Y3|   Y7|   Z6|   Z4|   Z2|   Z3|   LF|   L1|   LA|   LB|   LC|   LD|   LE|36R_18L|32R_14L|36L_18R|32L_14R|\nn|       238.0|2025-01-30 14:32:...|344459|AEA1173_|           Y1|36R/18L|     AEA|High vortex aircraft|40.49948|-3.56049|                1|   takeoff|                0|High vortex aircraft|                            6|                   1354.0|                  0.0|  14|    Thu|     false|2025-01-30 14:32:...|2025-01-30 14:32:...|2025-01-30 14:36:...|2025-01-30 14:09:...|false|false|false|false|false|false|true|false| true|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       233.0|2025-01-30 14:32:...|344459|AEA1173_|           Y1|36R/18L|     AEA|High vortex aircraft|40.49948|-3.56049|                1|   takeoff|                0|High vortex aircraft|                           11|                   1354.0|                  5.0|  14|    Thu|     false|2025-01-30 14:32:...|2025-01-30 14:32:...|2025-01-30 14:36:...|2025-01-30 14:09:...|false|false|false|false|false|false|true|false| true|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       228.0|2025-01-30 14:32:...|344459|AEA1173_|           Y1|36R/18L|     AEA|High vortex aircraft|40.49948|-3.56049|                1|   takeoff|                0|High vortex aircraft|                           16|                   1354.0|                 10.0|  14|    Thu|     false|2025-01-30 14:32:...|2025-01-30 14:32:...|2025-01-30 14:36:...|2025-01-30 14:09:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       223.0|2025-01-30 14:32:...|344459|AEA1173_|           Y1|36R/18L|     AEA|High vortex aircraft|40.49947| -3.5605|                1|   takeoff|                0|High vortex aircraft|                           21|                   1354.0|                 15.0|  14|    Thu|     false|2025-01-30 14:32:...|2025-01-30 14:32:...|2025-01-30 14:36:...|2025-01-30 14:09:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       218.0|2025-01-30 14:32:...|344459|AEA1173_|           Y1|36R/18L|     AEA|High vortex aircraft|40.49948|-3.56049|                1|   takeoff|                0|High vortex aircraft|                           26|                   1354.0|                 20.0|  14|    Thu|     false|2025-01-30 14:32:...|2025-01-30 14:32:...|2025-01-30 14:36:...|2025-01-30 14:09:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       208.0|2025-01-30 14:32:...|344459|AEA1173_|           Y1|36R/18L|     AEA|High vortex aircraft|40.49948|-3.56049|                1|   takeoff|                0|High vortex aircraft|                           36|                   1354.0|                 30.0|  14|    Thu|     false|2025-01-30 14:32:...|2025-01-30 14:32:...|2025-01-30 14:36:...|2025-01-30 14:09:...|false|false|false|false|false|false|true| true|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       203.0|2025-01-30 14:32:...|344459|AEA1173_|           Y1|36R/18L|     AEA|High vortex aircraft|40.49948|-3.56049|                1|   takeoff|                0|High vortex aircraft|                           41|                   1354.0|                 35.0|  14|    Thu|     false|2025-01-30 14:32:...|2025-01-30 14:32:...|2025-01-30 14:36:...|2025-01-30 14:09:...|false|false|false|false|false|false|true| true|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       198.0|2025-01-30 14:33:...|344459|AEA1173_|           Y1|36R/18L|     AEA|High vortex aircraft|40.49947| -3.5605|                3|   takeoff|                2|High vortex aircraft|                           46|                   1354.0|                 40.0|  14|    Thu|     false|2025-01-30 14:32:...|2025-01-30 14:32:...|2025-01-30 14:36:...|2025-01-30 14:09:...|false|false|false|false|false|false|true| true|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       193.0|2025-01-30 14:33:...|344459|AEA1173_|           Y1|36R/18L|     AEA|High vortex aircraft|40.49947| -3.5605|                3|   takeoff|                2|High vortex aircraft|                           51|                   1354.0|                 45.0|  14|    Thu|     false|2025-01-30 14:32:...|2025-01-30 14:32:...|2025-01-30 14:36:...|2025-01-30 14:09:...|false|false|false|false|false|false|true| true|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       187.0|2025-01-30 14:33:...|344459|AEA1173_|           Y1|36R/18L|     AEA|High vortex aircraft|40.49947| -3.5605|                3|   takeoff|                2|High vortex aircraft|                           57|                   1354.0|                 51.0|  14|    Thu|     false|2025-01-30 14:32:...|2025-01-30 14:32:...|2025-01-30 14:36:...|2025-01-30 14:09:...|false|false|false|false|false|false|true| true|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       182.0|2025-01-30 14:33:...|344459|AEA1173_|           Y1|36R/18L|     AEA|High vortex aircraft|40.49947| -3.5605|                3|   takeoff|                2|High vortex aircraft|                           62|                   1354.0|                 56.0|  14|    Thu|     false|2025-01-30 14:32:...|2025-01-30 14:32:...|2025-01-30 14:36:...|2025-01-30 14:09:...|false|false|false|false|false|false|true| true|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       172.0|2025-01-30 14:33:...|344459|AEA1173_|           Y1|36R/18L|     AEA|High vortex aircraft|40.49947| -3.5605|                3|   takeoff|                2|High vortex aircraft|                           72|                   1354.0|                 66.0|  14|    Thu|     false|2025-01-30 14:32:...|2025-01-30 14:32:...|2025-01-30 14:36:...|2025-01-30 14:09:...|false|false|false|false|false|false|true| true|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       167.0|2025-01-30 14:33:...|344459|AEA1173_|           Y1|36R/18L|     AEA|High vortex aircraft|40.49949|-3.56049|                3|   takeoff|                2|High vortex aircraft|                           77|                   1354.0|                 71.0|  14|    Thu|     false|2025-01-30 14:32:...|2025-01-30 14:32:...|2025-01-30 14:36:...|2025-01-30 14:09:...|false|false|false|false|false|false|true| true|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       153.0|2025-01-30 06:35:...|347309|AEA15HY_|           Y1|36R/18L|     AEA|Medium 2 (between...|40.49946|-3.56058|                2|   takeoff|                0|Medium 1 (between...|                           29|                    876.0|                  0.0|   6|    Thu|     false|2025-01-30 06:34:...|2025-01-30 06:35:...|2025-01-30 06:37:...|2025-01-30 06:20:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       153.0|2025-01-30 06:35:...|347309|AEA15HY_|           Y1|36R/18L|     AEA|Medium 2 (between...|40.49946|-3.56058|                2|   takeoff|                0|Medium 1 (between...|                           29|                    876.0|                  0.0|   6|    Thu|     false|2025-01-30 06:34:...|2025-01-30 06:35:...|2025-01-30 06:37:...|2025-01-30 06:20:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       152.0|2025-01-30 06:35:...|347309|AEA15HY_|           Y1|36R/18L|     AEA|Medium 2 (between...|40.49946|-3.56058|                2|   takeoff|                0|Medium 1 (between...|                           30|                    876.0|                  1.0|   6|    Thu|     false|2025-01-30 06:34:...|2025-01-30 06:35:...|2025-01-30 06:37:...|2025-01-30 06:20:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       152.0|2025-01-30 06:35:...|347309|AEA15HY_|           Y1|36R/18L|     AEA|Medium 2 (between...|40.49946|-3.56058|                2|   takeoff|                0|Medium 1 (between...|                           30|                    876.0|                  1.0|   6|    Thu|     false|2025-01-30 06:34:...|2025-01-30 06:35:...|2025-01-30 06:37:...|2025-01-30 06:20:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       151.0|2025-01-30 06:35:...|347309|AEA15HY_|           Y1|36R/18L|     AEA|Medium 2 (between...|40.49946|-3.56058|                2|   takeoff|                0|Medium 1 (between...|                           31|                    876.0|                  2.0|   6|    Thu|     false|2025-01-30 06:34:...|2025-01-30 06:35:...|2025-01-30 06:37:...|2025-01-30 06:20:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       151.0|2025-01-30 06:35:...|347309|AEA15HY_|           Y1|36R/18L|     AEA|Medium 2 (between...|40.49946|-3.56059|                2|   takeoff|                0|Medium 1 (between...|                           31|                    876.0|                  2.0|   6|    Thu|     false|2025-01-30 06:34:...|2025-01-30 06:35:...|2025-01-30 06:37:...|2025-01-30 06:20:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\n|       150.0|2025-01-30 06:35:...|347309|AEA15HY_|           Y1|36R/18L|     AEA|Medium 2 (between...|40.49946|-3.56058|                2|   takeoff|                0|Medium 1 (between...|                           32|                    876.0|                  3.0|   6|    Thu|     false|2025-01-30 06:34:...|2025-01-30 06:35:...|2025-01-30 06:37:...|2025-01-30 06:20:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|  false|   true|  false|\nnonly showing top 20 rows\n\nArchivo procesado: dia_30_01_2025.parquet -> 2025_01_30\nDataFrame[ICAO: string, Timestamp: timestamp, Flight status: string, lat: float, lon: float, Callsign: string, Designator: string, Runway: string, TurbulenceCategory: string, time_10s: string, RunwayFromPosition: string]\nDataFrame[ICAO: string, Callsign: string, Timestamp: timestamp, Flight status: string, lat: float, lon: float, Designator: string, Runway: string, TurbulenceCategory: string, first_on_ground_time: timestamp, first_holding_time: timestamp, first_airborne_time: timestamp, Speed: float, takeoff time: double, time_before_holding_point: double, time_at_holding_point: double]\nDataFrame[time_10s: string, Z1: boolean, KA6: boolean, KA8: boolean, K3: boolean, K2: boolean, K1: boolean, Y1: boolean, Y2: boolean, Y3: boolean, Y7: boolean, Z6: boolean, Z4: boolean, Z2: boolean, Z3: boolean, LF: boolean, L1: boolean, LA: boolean, LB: boolean, LC: boolean, LD: boolean, LE: boolean, 36R_18L: boolean, 32R_14L: boolean, 36L_18R: boolean, 32L_14R: boolean]\nDataFrame[Runway: string, Timestamp: timestamp, TurbulenceCategory: string, Event: string]\nDataFrame[Minute: timestamp, last min takeoffs: bigint, last min landings: bigint]\nDataFrame[takeoff_time: double, timestamp: timestamp, icao: string, callsign: string, holding_point: string, runway: string, operator: string, turbulence_category: string, lat: float, lon: float, last_min_takeoffs: bigint, last_event: string, last_min_landings: bigint, last_event_turb_cat: string, time_since_last_event_seconds: bigint, time_before_holding_point: double, time_at_holding_point: double, hour: int, weekday: string, is_holiday: boolean, event_timestamp: timestamp, first_holding_time: timestamp, first_airborne_time: timestamp, first_on_ground_time: timestamp, Z1: boolean, KA6: boolean, KA8: boolean, K3: boolean, K2: boolean, K1: boolean, Y1: boolean, Y2: boolean, Y3: boolean, Y7: boolean, Z6: boolean, Z4: boolean, Z2: boolean, Z3: boolean, LF: boolean, L1: boolean, LA: boolean, LB: boolean, LC: boolean, LD: boolean, LE: boolean, 36R_18L: boolean, 32R_14L: boolean, 36L_18R: boolean, 32L_14R: boolean]\nDataFrame[ICAO: string, Timestamp: timestamp, Flight status: string, lat: float, lon: float, Callsign: string, Designator: string, Runway: string, TurbulenceCategory: string, time_10s: string, RunwayFromPosition: string]\nDataFrame[ICAO: string, Callsign: string, Timestamp: timestamp, Flight status: string, lat: float, lon: float, Designator: string, Runway: string, TurbulenceCategory: string, first_on_ground_time: timestamp, first_holding_time: timestamp, first_airborne_time: timestamp, Speed: float, takeoff time: double, time_before_holding_point: double, time_at_holding_point: double]\nDataFrame[time_10s: string, Z1: boolean, KA6: boolean, KA8: boolean, K3: boolean, K2: boolean, K1: boolean, Y1: boolean, Y2: boolean, Y3: boolean, Y7: boolean, Z6: boolean, Z4: boolean, Z2: boolean, Z3: boolean, LF: boolean, L1: boolean, LA: boolean, LB: boolean, LC: boolean, LD: boolean, LE: boolean, 36R_18L: boolean, 32R_14L: boolean, 36L_18R: boolean, 32L_14R: boolean]\nDataFrame[Runway: string, Timestamp: timestamp, TurbulenceCategory: string, Event: string]\nDataFrame[Minute: timestamp, last min takeoffs: bigint, last min landings: bigint]\nDataFrame[takeoff_time: double, timestamp: timestamp, icao: string, callsign: string, holding_point: string, runway: string, operator: string, turbulence_category: string, lat: float, lon: float, last_min_takeoffs: bigint, last_event: string, last_min_landings: bigint, last_event_turb_cat: string, time_since_last_event_seconds: bigint, time_before_holding_point: double, time_at_holding_point: double, hour: int, weekday: string, is_holiday: boolean, event_timestamp: timestamp, first_holding_time: timestamp, first_airborne_time: timestamp, first_on_ground_time: timestamp, Z1: boolean, KA6: boolean, KA8: boolean, K3: boolean, K2: boolean, K1: boolean, Y1: boolean, Y2: boolean, Y3: boolean, Y7: boolean, Z6: boolean, Z4: boolean, Z2: boolean, Z3: boolean, LF: boolean, L1: boolean, LA: boolean, LB: boolean, LC: boolean, LD: boolean, LE: boolean, 36R_18L: boolean, 32R_14L: boolean, 36L_18R: boolean, 32L_14R: boolean]\nn|takeoff_time|           timestamp|  icao|callsign|holding_point| runway|operator| turbulence_category|     lat|     lon|last_min_takeoffs|last_event|last_min_landings| last_event_turb_cat|time_since_last_event_seconds|time_before_holding_point|time_at_holding_point|hour|weekday|is_holiday|     event_timestamp|  first_holding_time| first_airborne_time|first_on_ground_time|   Z1|  KA6|  KA8|   K3|   K2|   K1|  Y1|   Y2|   Y3|   Y7|   Z6|   Z4|   Z2|   Z3|   LF|   L1|   LA|   LB|   LC|   LD|   LE|36R_18L|32R_14L|36L_18R|32L_14R|\nn|       137.0|2025-01-31 06:51:...|3453C1|AEA1065_|           Y1|36R/18L|     AEA|Medium 2 (between...|40.49946|-3.56057|                1|   takeoff|                0|Medium 2 (between...|                           22|                    822.0|                  0.0|   6|    Fri|     false|2025-01-31 06:50:...|2025-01-31 06:51:...|2025-01-31 06:53:...|2025-01-31 06:37:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|   true|  false|  false|\n|       137.0|2025-01-31 06:51:...|3453C1|AEA1065_|           Y1|36R/18L|     AEA|Medium 2 (between...|40.49946|-3.56056|                1|   takeoff|                0|Medium 2 (between...|                           22|                    822.0|                  0.0|   6|    Fri|     false|2025-01-31 06:50:...|2025-01-31 06:51:...|2025-01-31 06:53:...|2025-01-31 06:37:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|   true|  false|  false|\n|       136.0|2025-01-31 06:51:...|3453C1|AEA1065_|           Y1|36R/18L|     AEA|Medium 2 (between...|40.49946|-3.56057|                1|   takeoff|                0|Medium 2 (between...|                           23|                    822.0|                  1.0|   6|    Fri|     false|2025-01-31 06:50:...|2025-01-31 06:51:...|2025-01-31 06:53:...|2025-01-31 06:37:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|   true|  false|  false|\n|       136.0|2025-01-31 06:51:...|3453C1|AEA1065_|           Y1|36R/18L|     AEA|Medium 2 (between...|40.49946|-3.56056|                1|   takeoff|                0|Medium 2 (between...|                           23|                    822.0|                  1.0|   6|    Fri|     false|2025-01-31 06:50:...|2025-01-31 06:51:...|2025-01-31 06:53:...|2025-01-31 06:37:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|   true|  false|  false|\n|       135.0|2025-01-31 06:51:...|3453C1|AEA1065_|           Y1|36R/18L|     AEA|Medium 2 (between...|40.49946|-3.56057|                1|   takeoff|                0|Medium 2 (between...|                           24|                    822.0|                  2.0|   6|    Fri|     false|2025-01-31 06:50:...|2025-01-31 06:51:...|2025-01-31 06:53:...|2025-01-31 06:37:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|   true|  false|  false|\n|       135.0|2025-01-31 06:51:...|3453C1|AEA1065_|           Y1|36R/18L|     AEA|Medium 2 (between...|40.49946|-3.56057|                1|   takeoff|                0|Medium 2 (between...|                           24|                    822.0|                  2.0|   6|    Fri|     false|2025-01-31 06:50:...|2025-01-31 06:51:...|2025-01-31 06:53:...|2025-01-31 06:37:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|   true|  false|  false|\n|       134.0|2025-01-31 06:51:...|3453C1|AEA1065_|           Y1|36R/18L|     AEA|Medium 2 (between...|40.49946|-3.56057|                1|   takeoff|                0|Medium 2 (between...|                           25|                    822.0|                  3.0|   6|    Fri|     false|2025-01-31 06:50:...|2025-01-31 06:51:...|2025-01-31 06:53:...|2025-01-31 06:37:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|   true|  false|  false|\n|       134.0|2025-01-31 06:51:...|3453C1|AEA1065_|           Y1|36R/18L|     AEA|Medium 2 (between...|40.49946|-3.56056|                1|   takeoff|                0|Medium 2 (between...|                           25|                    822.0|                  3.0|   6|    Fri|     false|2025-01-31 06:50:...|2025-01-31 06:51:...|2025-01-31 06:53:...|2025-01-31 06:37:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|   true|  false|  false|\n|       132.0|2025-01-31 06:51:...|3453C1|AEA1065_|           Y1|36R/18L|     AEA|Medium 2 (between...|40.49946|-3.56056|                1|   takeoff|                0|Medium 2 (between...|                           27|                    822.0|                  5.0|   6|    Fri|     false|2025-01-31 06:50:...|2025-01-31 06:51:...|2025-01-31 06:53:...|2025-01-31 06:37:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|   true|  false|  false|\n|       132.0|2025-01-31 06:51:...|3453C1|AEA1065_|           Y1|36R/18L|     AEA|Medium 2 (between...|40.49946|-3.56057|                1|   takeoff|                0|Medium 2 (between...|                           27|                    822.0|                  5.0|   6|    Fri|     false|2025-01-31 06:50:...|2025-01-31 06:51:...|2025-01-31 06:53:...|2025-01-31 06:37:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|   true|  false|  false|\n|       131.0|2025-01-31 06:51:...|3453C1|AEA1065_|           Y1|36R/18L|     AEA|Medium 2 (between...|40.49946|-3.56056|                1|   takeoff|                0|Medium 2 (between...|                           28|                    822.0|                  6.0|   6|    Fri|     false|2025-01-31 06:50:...|2025-01-31 06:51:...|2025-01-31 06:53:...|2025-01-31 06:37:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|   true|  false|  false|\n|       131.0|2025-01-31 06:51:...|3453C1|AEA1065_|           Y1|36R/18L|     AEA|Medium 2 (between...|40.49946|-3.56056|                1|   takeoff|                0|Medium 2 (between...|                           28|                    822.0|                  6.0|   6|    Fri|     false|2025-01-31 06:50:...|2025-01-31 06:51:...|2025-01-31 06:53:...|2025-01-31 06:37:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|   true|  false|  false|\n|       130.0|2025-01-31 06:51:...|3453C1|AEA1065_|           Y1|36R/18L|     AEA|Medium 2 (between...|40.49946|-3.56056|                1|   takeoff|                0|Medium 2 (between...|                           29|                    822.0|                  7.0|   6|    Fri|     false|2025-01-31 06:50:...|2025-01-31 06:51:...|2025-01-31 06:53:...|2025-01-31 06:37:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|   true|  false|  false|\n|       130.0|2025-01-31 06:51:...|3453C1|AEA1065_|           Y1|36R/18L|     AEA|Medium 2 (between...|40.49946|-3.56057|                1|   takeoff|                0|Medium 2 (between...|                           29|                    822.0|                  7.0|   6|    Fri|     false|2025-01-31 06:50:...|2025-01-31 06:51:...|2025-01-31 06:53:...|2025-01-31 06:37:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|   true|  false|  false|\n|       129.0|2025-01-31 06:51:...|3453C1|AEA1065_|           Y1|36R/18L|     AEA|Medium 2 (between...|40.49946|-3.56056|                1|   takeoff|                0|Medium 2 (between...|                           30|                    822.0|                  8.0|   6|    Fri|     false|2025-01-31 06:50:...|2025-01-31 06:51:...|2025-01-31 06:53:...|2025-01-31 06:37:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|   true|  false|  false|\n|       129.0|2025-01-31 06:51:...|3453C1|AEA1065_|           Y1|36R/18L|     AEA|Medium 2 (between...|40.49946|-3.56056|                1|   takeoff|                0|Medium 2 (between...|                           30|                    822.0|                  8.0|   6|    Fri|     false|2025-01-31 06:50:...|2025-01-31 06:51:...|2025-01-31 06:53:...|2025-01-31 06:37:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|   true|  false|  false|\n|       128.0|2025-01-31 06:51:...|3453C1|AEA1065_|           Y1|36R/18L|     AEA|Medium 2 (between...|40.49946|-3.56057|                1|   takeoff|                0|Medium 2 (between...|                           31|                    822.0|                  9.0|   6|    Fri|     false|2025-01-31 06:50:...|2025-01-31 06:51:...|2025-01-31 06:53:...|2025-01-31 06:37:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|   true|   true|  false|\n|       128.0|2025-01-31 06:51:...|3453C1|AEA1065_|           Y1|36R/18L|     AEA|Medium 2 (between...|40.49946|-3.56056|                1|   takeoff|                0|Medium 2 (between...|                           31|                    822.0|                  9.0|   6|    Fri|     false|2025-01-31 06:50:...|2025-01-31 06:51:...|2025-01-31 06:53:...|2025-01-31 06:37:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|   true|   true|  false|\n|       127.0|2025-01-31 06:51:...|3453C1|AEA1065_|           Y1|36R/18L|     AEA|Medium 2 (between...|40.49946|-3.56056|                1|   takeoff|                0|Medium 2 (between...|                           32|                    822.0|                 10.0|   6|    Fri|     false|2025-01-31 06:50:...|2025-01-31 06:51:...|2025-01-31 06:53:...|2025-01-31 06:37:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|   true|   true|  false|\n|       127.0|2025-01-31 06:51:...|3453C1|AEA1065_|           Y1|36R/18L|     AEA|Medium 2 (between...|40.49946|-3.56056|                1|   takeoff|                0|Medium 2 (between...|                           32|                    822.0|                 10.0|   6|    Fri|     false|2025-01-31 06:50:...|2025-01-31 06:51:...|2025-01-31 06:53:...|2025-01-31 06:37:...|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false|   true|   true|   true|  false|\nnonly showing top 20 rows\n\nArchivo procesado: dia_31_01_2025.parquet -> 2025_01_31\nDataFrame[ICAO: string, Timestamp: timestamp, Flight status: string, lat: float, lon: float, Callsign: string, Designator: string, Runway: string, TurbulenceCategory: string, time_10s: string, RunwayFromPosition: string]\nDataFrame[ICAO: string, Callsign: string, Timestamp: timestamp, Flight status: string, lat: float, lon: float, Designator: string, Runway: string, TurbulenceCategory: string, first_on_ground_time: timestamp, first_holding_time: timestamp, first_airborne_time: timestamp, Speed: float, takeoff time: double, time_before_holding_point: double, time_at_holding_point: double]\nDataFrame[time_10s: string, Z1: boolean, KA6: boolean, KA8: boolean, K3: boolean, K2: boolean, K1: boolean, Y1: boolean, Y2: boolean, Y3: boolean, Y7: boolean, Z6: boolean, Z4: boolean, Z2: boolean, Z3: boolean, LF: boolean, L1: boolean, LA: boolean, LB: boolean, LC: boolean, LD: boolean, LE: boolean, 36R_18L: boolean, 32R_14L: boolean, 36L_18R: boolean, 32L_14R: boolean]\nDataFrame[Runway: string, Timestamp: timestamp, TurbulenceCategory: string, Event: string]\nDataFrame[Minute: timestamp, last min takeoffs: bigint, last min landings: bigint]\nDataFrame[takeoff_time: double, timestamp: timestamp, icao: string, callsign: string, holding_point: string, runway: string, operator: string, turbulence_category: string, lat: float, lon: float, last_min_takeoffs: bigint, last_event: string, last_min_landings: bigint, last_event_turb_cat: string, time_since_last_event_seconds: bigint, time_before_holding_point: double, time_at_holding_point: double, hour: int, weekday: string, is_holiday: boolean, event_timestamp: timestamp, first_holding_time: timestamp, first_airborne_time: timestamp, first_on_ground_time: timestamp, Z1: boolean, KA6: boolean, KA8: boolean, K3: boolean, K2: boolean, K1: boolean, Y1: boolean, Y2: boolean, Y3: boolean, Y7: boolean, Z6: boolean, Z4: boolean, Z2: boolean, Z3: boolean, LF: boolean, L1: boolean, LA: boolean, LB: boolean, LC: boolean, LD: boolean, LE: boolean, 36R_18L: boolean, 32R_14L: boolean, 36L_18R: boolean, 32L_14R: boolean]"}]},"apps":[],"jobName":"paragraph_1745441247752_-1237270093","id":"20250416-112807_1260537330","dateCreated":"2025-04-23T20:47:27+0000","dateStarted":"2025-04-25T08:46:34+0000","dateFinished":"2025-04-25T14:20:52+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:21754"},{"text":"%livy3.pyspark\n","user":"jmarti32","dateUpdated":"2025-04-23T20:47:27+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1745441247752_-1551937586","id":"20250416-154605_557762669","dateCreated":"2025-04-23T20:47:27+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:21755"}],"name":"pipeline_bucle","id":"2KUB7WGBN","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"livy3:shared_process":[],"livy:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}